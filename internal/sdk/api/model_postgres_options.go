/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostgresOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostgresOptions{}

// PostgresOptions struct for PostgresOptions
type PostgresOptions struct {
	DatabaseOptions PostgresOptionsDatabaseOptions `json:"database_options"`
}

type _PostgresOptions PostgresOptions

// NewPostgresOptions instantiates a new PostgresOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresOptions(databaseOptions PostgresOptionsDatabaseOptions) *PostgresOptions {
	this := PostgresOptions{}
	this.DatabaseOptions = databaseOptions
	return &this
}

// NewPostgresOptionsWithDefaults instantiates a new PostgresOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresOptionsWithDefaults() *PostgresOptions {
	this := PostgresOptions{}
	return &this
}

// GetDatabaseOptions returns the DatabaseOptions field value
func (o *PostgresOptions) GetDatabaseOptions() PostgresOptionsDatabaseOptions {
	if o == nil {
		var ret PostgresOptionsDatabaseOptions
		return ret
	}

	return o.DatabaseOptions
}

// GetDatabaseOptionsOk returns a tuple with the DatabaseOptions field value
// and a boolean to check if the value has been set.
func (o *PostgresOptions) GetDatabaseOptionsOk() (*PostgresOptionsDatabaseOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseOptions, true
}

// SetDatabaseOptions sets field value
func (o *PostgresOptions) SetDatabaseOptions(v PostgresOptionsDatabaseOptions) {
	o.DatabaseOptions = v
}

func (o PostgresOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostgresOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["database_options"] = o.DatabaseOptions
	return toSerialize, nil
}

func (o *PostgresOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_options",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostgresOptions := _PostgresOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostgresOptions)

	if err != nil {
		return err
	}

	*o = PostgresOptions(varPostgresOptions)

	return err
}

type NullablePostgresOptions struct {
	value *PostgresOptions
	isSet bool
}

func (v NullablePostgresOptions) Get() *PostgresOptions {
	return v.value
}

func (v *NullablePostgresOptions) Set(val *PostgresOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresOptions(val *PostgresOptions) *NullablePostgresOptions {
	return &NullablePostgresOptions{value: val, isSet: true}
}

func (v NullablePostgresOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


