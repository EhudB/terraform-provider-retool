/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SnowflakeOptionsAuthenticationOptions struct for SnowflakeOptionsAuthenticationOptions
type SnowflakeOptionsAuthenticationOptions struct {
	SnowflakeOptionsAuthenticationOptionsAnyOf *SnowflakeOptionsAuthenticationOptionsAnyOf
	SnowflakeOptionsAuthenticationOptionsAnyOf1 *SnowflakeOptionsAuthenticationOptionsAnyOf1
	SnowflakeOptionsAuthenticationOptionsAnyOf2 *SnowflakeOptionsAuthenticationOptionsAnyOf2
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SnowflakeOptionsAuthenticationOptions) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SnowflakeOptionsAuthenticationOptionsAnyOf
	err = json.Unmarshal(data, &dst.SnowflakeOptionsAuthenticationOptionsAnyOf);
	if err == nil {
		jsonSnowflakeOptionsAuthenticationOptionsAnyOf, _ := json.Marshal(dst.SnowflakeOptionsAuthenticationOptionsAnyOf)
		if string(jsonSnowflakeOptionsAuthenticationOptionsAnyOf) == "{}" { // empty struct
			dst.SnowflakeOptionsAuthenticationOptionsAnyOf = nil
		} else {
			return nil // data stored in dst.SnowflakeOptionsAuthenticationOptionsAnyOf, return on the first match
		}
	} else {
		dst.SnowflakeOptionsAuthenticationOptionsAnyOf = nil
	}

	// try to unmarshal JSON data into SnowflakeOptionsAuthenticationOptionsAnyOf1
	err = json.Unmarshal(data, &dst.SnowflakeOptionsAuthenticationOptionsAnyOf1);
	if err == nil {
		jsonSnowflakeOptionsAuthenticationOptionsAnyOf1, _ := json.Marshal(dst.SnowflakeOptionsAuthenticationOptionsAnyOf1)
		if string(jsonSnowflakeOptionsAuthenticationOptionsAnyOf1) == "{}" { // empty struct
			dst.SnowflakeOptionsAuthenticationOptionsAnyOf1 = nil
		} else {
			return nil // data stored in dst.SnowflakeOptionsAuthenticationOptionsAnyOf1, return on the first match
		}
	} else {
		dst.SnowflakeOptionsAuthenticationOptionsAnyOf1 = nil
	}

	// try to unmarshal JSON data into SnowflakeOptionsAuthenticationOptionsAnyOf2
	err = json.Unmarshal(data, &dst.SnowflakeOptionsAuthenticationOptionsAnyOf2);
	if err == nil {
		jsonSnowflakeOptionsAuthenticationOptionsAnyOf2, _ := json.Marshal(dst.SnowflakeOptionsAuthenticationOptionsAnyOf2)
		if string(jsonSnowflakeOptionsAuthenticationOptionsAnyOf2) == "{}" { // empty struct
			dst.SnowflakeOptionsAuthenticationOptionsAnyOf2 = nil
		} else {
			return nil // data stored in dst.SnowflakeOptionsAuthenticationOptionsAnyOf2, return on the first match
		}
	} else {
		dst.SnowflakeOptionsAuthenticationOptionsAnyOf2 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SnowflakeOptionsAuthenticationOptions)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SnowflakeOptionsAuthenticationOptions) MarshalJSON() ([]byte, error) {
	if src.SnowflakeOptionsAuthenticationOptionsAnyOf != nil {
		return json.Marshal(&src.SnowflakeOptionsAuthenticationOptionsAnyOf)
	}

	if src.SnowflakeOptionsAuthenticationOptionsAnyOf1 != nil {
		return json.Marshal(&src.SnowflakeOptionsAuthenticationOptionsAnyOf1)
	}

	if src.SnowflakeOptionsAuthenticationOptionsAnyOf2 != nil {
		return json.Marshal(&src.SnowflakeOptionsAuthenticationOptionsAnyOf2)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSnowflakeOptionsAuthenticationOptions struct {
	value *SnowflakeOptionsAuthenticationOptions
	isSet bool
}

func (v NullableSnowflakeOptionsAuthenticationOptions) Get() *SnowflakeOptionsAuthenticationOptions {
	return v.value
}

func (v *NullableSnowflakeOptionsAuthenticationOptions) Set(val *SnowflakeOptionsAuthenticationOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeOptionsAuthenticationOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeOptionsAuthenticationOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeOptionsAuthenticationOptions(val *SnowflakeOptionsAuthenticationOptions) *NullableSnowflakeOptionsAuthenticationOptions {
	return &NullableSnowflakeOptionsAuthenticationOptions{value: val, isSet: true}
}

func (v NullableSnowflakeOptionsAuthenticationOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeOptionsAuthenticationOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


