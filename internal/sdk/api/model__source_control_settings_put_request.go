/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceControlSettingsPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceControlSettingsPutRequest{}

// SourceControlSettingsPutRequest Shape of Source Control Settings
type SourceControlSettingsPutRequest struct {
	Settings SourceControlSettingsPutRequestSettings `json:"settings"`
}

type _SourceControlSettingsPutRequest SourceControlSettingsPutRequest

// NewSourceControlSettingsPutRequest instantiates a new SourceControlSettingsPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceControlSettingsPutRequest(settings SourceControlSettingsPutRequestSettings) *SourceControlSettingsPutRequest {
	this := SourceControlSettingsPutRequest{}
	this.Settings = settings
	return &this
}

// NewSourceControlSettingsPutRequestWithDefaults instantiates a new SourceControlSettingsPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceControlSettingsPutRequestWithDefaults() *SourceControlSettingsPutRequest {
	this := SourceControlSettingsPutRequest{}
	return &this
}

// GetSettings returns the Settings field value
func (o *SourceControlSettingsPutRequest) GetSettings() SourceControlSettingsPutRequestSettings {
	if o == nil {
		var ret SourceControlSettingsPutRequestSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *SourceControlSettingsPutRequest) GetSettingsOk() (*SourceControlSettingsPutRequestSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *SourceControlSettingsPutRequest) SetSettings(v SourceControlSettingsPutRequestSettings) {
	o.Settings = v
}

func (o SourceControlSettingsPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceControlSettingsPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["settings"] = o.Settings
	return toSerialize, nil
}

func (o *SourceControlSettingsPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"settings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceControlSettingsPutRequest := _SourceControlSettingsPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceControlSettingsPutRequest)

	if err != nil {
		return err
	}

	*o = SourceControlSettingsPutRequest(varSourceControlSettingsPutRequest)

	return err
}

type NullableSourceControlSettingsPutRequest struct {
	value *SourceControlSettingsPutRequest
	isSet bool
}

func (v NullableSourceControlSettingsPutRequest) Get() *SourceControlSettingsPutRequest {
	return v.value
}

func (v *NullableSourceControlSettingsPutRequest) Set(val *SourceControlSettingsPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlSettingsPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlSettingsPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlSettingsPutRequest(val *SourceControlSettingsPutRequest) *NullableSourceControlSettingsPutRequest {
	return &NullableSourceControlSettingsPutRequest{value: val, isSet: true}
}

func (v NullableSourceControlSettingsPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlSettingsPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


