/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// UsersUserIdPatchRequestOperationsInner struct for UsersUserIdPatchRequestOperationsInner
type UsersUserIdPatchRequestOperationsInner struct {
	UsersUserIdPatchRequestOperationsInnerAnyOf *UsersUserIdPatchRequestOperationsInnerAnyOf
	UsersUserIdPatchRequestOperationsInnerAnyOf1 *UsersUserIdPatchRequestOperationsInnerAnyOf1
	UsersUserIdPatchRequestOperationsInnerAnyOf2 *UsersUserIdPatchRequestOperationsInnerAnyOf2
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UsersUserIdPatchRequestOperationsInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into UsersUserIdPatchRequestOperationsInnerAnyOf
	err = json.Unmarshal(data, &dst.UsersUserIdPatchRequestOperationsInnerAnyOf);
	if err == nil {
		jsonUsersUserIdPatchRequestOperationsInnerAnyOf, _ := json.Marshal(dst.UsersUserIdPatchRequestOperationsInnerAnyOf)
		if string(jsonUsersUserIdPatchRequestOperationsInnerAnyOf) == "{}" { // empty struct
			dst.UsersUserIdPatchRequestOperationsInnerAnyOf = nil
		} else {
			return nil // data stored in dst.UsersUserIdPatchRequestOperationsInnerAnyOf, return on the first match
		}
	} else {
		dst.UsersUserIdPatchRequestOperationsInnerAnyOf = nil
	}

	// try to unmarshal JSON data into UsersUserIdPatchRequestOperationsInnerAnyOf1
	err = json.Unmarshal(data, &dst.UsersUserIdPatchRequestOperationsInnerAnyOf1);
	if err == nil {
		jsonUsersUserIdPatchRequestOperationsInnerAnyOf1, _ := json.Marshal(dst.UsersUserIdPatchRequestOperationsInnerAnyOf1)
		if string(jsonUsersUserIdPatchRequestOperationsInnerAnyOf1) == "{}" { // empty struct
			dst.UsersUserIdPatchRequestOperationsInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.UsersUserIdPatchRequestOperationsInnerAnyOf1, return on the first match
		}
	} else {
		dst.UsersUserIdPatchRequestOperationsInnerAnyOf1 = nil
	}

	// try to unmarshal JSON data into UsersUserIdPatchRequestOperationsInnerAnyOf2
	err = json.Unmarshal(data, &dst.UsersUserIdPatchRequestOperationsInnerAnyOf2);
	if err == nil {
		jsonUsersUserIdPatchRequestOperationsInnerAnyOf2, _ := json.Marshal(dst.UsersUserIdPatchRequestOperationsInnerAnyOf2)
		if string(jsonUsersUserIdPatchRequestOperationsInnerAnyOf2) == "{}" { // empty struct
			dst.UsersUserIdPatchRequestOperationsInnerAnyOf2 = nil
		} else {
			return nil // data stored in dst.UsersUserIdPatchRequestOperationsInnerAnyOf2, return on the first match
		}
	} else {
		dst.UsersUserIdPatchRequestOperationsInnerAnyOf2 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(UsersUserIdPatchRequestOperationsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *UsersUserIdPatchRequestOperationsInner) MarshalJSON() ([]byte, error) {
	if src.UsersUserIdPatchRequestOperationsInnerAnyOf != nil {
		return json.Marshal(&src.UsersUserIdPatchRequestOperationsInnerAnyOf)
	}

	if src.UsersUserIdPatchRequestOperationsInnerAnyOf1 != nil {
		return json.Marshal(&src.UsersUserIdPatchRequestOperationsInnerAnyOf1)
	}

	if src.UsersUserIdPatchRequestOperationsInnerAnyOf2 != nil {
		return json.Marshal(&src.UsersUserIdPatchRequestOperationsInnerAnyOf2)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUsersUserIdPatchRequestOperationsInner struct {
	value *UsersUserIdPatchRequestOperationsInner
	isSet bool
}

func (v NullableUsersUserIdPatchRequestOperationsInner) Get() *UsersUserIdPatchRequestOperationsInner {
	return v.value
}

func (v *NullableUsersUserIdPatchRequestOperationsInner) Set(val *UsersUserIdPatchRequestOperationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersUserIdPatchRequestOperationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersUserIdPatchRequestOperationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersUserIdPatchRequestOperationsInner(val *UsersUserIdPatchRequestOperationsInner) *NullableUsersUserIdPatchRequestOperationsInner {
	return &NullableUsersUserIdPatchRequestOperationsInner{value: val, isSet: true}
}

func (v NullableUsersUserIdPatchRequestOperationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersUserIdPatchRequestOperationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


