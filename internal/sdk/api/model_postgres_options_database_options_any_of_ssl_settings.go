/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PostgresOptionsDatabaseOptionsAnyOfSslSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostgresOptionsDatabaseOptionsAnyOfSslSettings{}

// PostgresOptionsDatabaseOptionsAnyOfSslSettings struct for PostgresOptionsDatabaseOptionsAnyOfSslSettings
type PostgresOptionsDatabaseOptionsAnyOfSslSettings struct {
	Enabled *bool `json:"enabled,omitempty"`
	ClientKey NullableString `json:"client_key,omitempty"`
	ClientCert NullableString `json:"client_cert,omitempty"`
	CaCert NullableString `json:"ca_cert,omitempty"`
}

// NewPostgresOptionsDatabaseOptionsAnyOfSslSettings instantiates a new PostgresOptionsDatabaseOptionsAnyOfSslSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresOptionsDatabaseOptionsAnyOfSslSettings() *PostgresOptionsDatabaseOptionsAnyOfSslSettings {
	this := PostgresOptionsDatabaseOptionsAnyOfSslSettings{}
	return &this
}

// NewPostgresOptionsDatabaseOptionsAnyOfSslSettingsWithDefaults instantiates a new PostgresOptionsDatabaseOptionsAnyOfSslSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresOptionsDatabaseOptionsAnyOfSslSettingsWithDefaults() *PostgresOptionsDatabaseOptionsAnyOfSslSettings {
	this := PostgresOptionsDatabaseOptionsAnyOfSslSettings{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetClientKey returns the ClientKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) GetClientKey() string {
	if o == nil || IsNil(o.ClientKey.Get()) {
		var ret string
		return ret
	}
	return *o.ClientKey.Get()
}

// GetClientKeyOk returns a tuple with the ClientKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) GetClientKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientKey.Get(), o.ClientKey.IsSet()
}

// HasClientKey returns a boolean if a field has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) HasClientKey() bool {
	if o != nil && o.ClientKey.IsSet() {
		return true
	}

	return false
}

// SetClientKey gets a reference to the given NullableString and assigns it to the ClientKey field.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) SetClientKey(v string) {
	o.ClientKey.Set(&v)
}
// SetClientKeyNil sets the value for ClientKey to be an explicit nil
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) SetClientKeyNil() {
	o.ClientKey.Set(nil)
}

// UnsetClientKey ensures that no value is present for ClientKey, not even an explicit nil
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) UnsetClientKey() {
	o.ClientKey.Unset()
}

// GetClientCert returns the ClientCert field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) GetClientCert() string {
	if o == nil || IsNil(o.ClientCert.Get()) {
		var ret string
		return ret
	}
	return *o.ClientCert.Get()
}

// GetClientCertOk returns a tuple with the ClientCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) GetClientCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientCert.Get(), o.ClientCert.IsSet()
}

// HasClientCert returns a boolean if a field has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) HasClientCert() bool {
	if o != nil && o.ClientCert.IsSet() {
		return true
	}

	return false
}

// SetClientCert gets a reference to the given NullableString and assigns it to the ClientCert field.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) SetClientCert(v string) {
	o.ClientCert.Set(&v)
}
// SetClientCertNil sets the value for ClientCert to be an explicit nil
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) SetClientCertNil() {
	o.ClientCert.Set(nil)
}

// UnsetClientCert ensures that no value is present for ClientCert, not even an explicit nil
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) UnsetClientCert() {
	o.ClientCert.Unset()
}

// GetCaCert returns the CaCert field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) GetCaCert() string {
	if o == nil || IsNil(o.CaCert.Get()) {
		var ret string
		return ret
	}
	return *o.CaCert.Get()
}

// GetCaCertOk returns a tuple with the CaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) GetCaCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaCert.Get(), o.CaCert.IsSet()
}

// HasCaCert returns a boolean if a field has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) HasCaCert() bool {
	if o != nil && o.CaCert.IsSet() {
		return true
	}

	return false
}

// SetCaCert gets a reference to the given NullableString and assigns it to the CaCert field.
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) SetCaCert(v string) {
	o.CaCert.Set(&v)
}
// SetCaCertNil sets the value for CaCert to be an explicit nil
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) SetCaCertNil() {
	o.CaCert.Set(nil)
}

// UnsetCaCert ensures that no value is present for CaCert, not even an explicit nil
func (o *PostgresOptionsDatabaseOptionsAnyOfSslSettings) UnsetCaCert() {
	o.CaCert.Unset()
}

func (o PostgresOptionsDatabaseOptionsAnyOfSslSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostgresOptionsDatabaseOptionsAnyOfSslSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.ClientKey.IsSet() {
		toSerialize["client_key"] = o.ClientKey.Get()
	}
	if o.ClientCert.IsSet() {
		toSerialize["client_cert"] = o.ClientCert.Get()
	}
	if o.CaCert.IsSet() {
		toSerialize["ca_cert"] = o.CaCert.Get()
	}
	return toSerialize, nil
}

type NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings struct {
	value *PostgresOptionsDatabaseOptionsAnyOfSslSettings
	isSet bool
}

func (v NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings) Get() *PostgresOptionsDatabaseOptionsAnyOfSslSettings {
	return v.value
}

func (v *NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings) Set(val *PostgresOptionsDatabaseOptionsAnyOfSslSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresOptionsDatabaseOptionsAnyOfSslSettings(val *PostgresOptionsDatabaseOptionsAnyOfSslSettings) *NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings {
	return &NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings{value: val, isSet: true}
}

func (v NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresOptionsDatabaseOptionsAnyOfSslSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


