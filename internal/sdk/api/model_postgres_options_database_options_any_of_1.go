/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PostgresOptionsDatabaseOptionsAnyOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostgresOptionsDatabaseOptionsAnyOf1{}

// PostgresOptionsDatabaseOptionsAnyOf1 struct for PostgresOptionsDatabaseOptionsAnyOf1
type PostgresOptionsDatabaseOptionsAnyOf1 struct {
	ConnectionString *string `json:"connection_string,omitempty"`
	// This allows you to use Javascript to dynamically generate SQL but also turns off SQL injection protection.
	DisableConvertingQueriesToPreparedStatements *bool `json:"disable_converting_queries_to_prepared_statements,omitempty"`
	// This allows you to enable writing via only the restrictive GUI query editor.
	ShowWriteGuiOnly *bool `json:"show_write_gui_only,omitempty"`
}

// NewPostgresOptionsDatabaseOptionsAnyOf1 instantiates a new PostgresOptionsDatabaseOptionsAnyOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresOptionsDatabaseOptionsAnyOf1() *PostgresOptionsDatabaseOptionsAnyOf1 {
	this := PostgresOptionsDatabaseOptionsAnyOf1{}
	return &this
}

// NewPostgresOptionsDatabaseOptionsAnyOf1WithDefaults instantiates a new PostgresOptionsDatabaseOptionsAnyOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresOptionsDatabaseOptionsAnyOf1WithDefaults() *PostgresOptionsDatabaseOptionsAnyOf1 {
	this := PostgresOptionsDatabaseOptionsAnyOf1{}
	return &this
}

// GetConnectionString returns the ConnectionString field value if set, zero value otherwise.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) GetConnectionString() string {
	if o == nil || IsNil(o.ConnectionString) {
		var ret string
		return ret
	}
	return *o.ConnectionString
}

// GetConnectionStringOk returns a tuple with the ConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) GetConnectionStringOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionString) {
		return nil, false
	}
	return o.ConnectionString, true
}

// HasConnectionString returns a boolean if a field has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) HasConnectionString() bool {
	if o != nil && !IsNil(o.ConnectionString) {
		return true
	}

	return false
}

// SetConnectionString gets a reference to the given string and assigns it to the ConnectionString field.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) SetConnectionString(v string) {
	o.ConnectionString = &v
}

// GetDisableConvertingQueriesToPreparedStatements returns the DisableConvertingQueriesToPreparedStatements field value if set, zero value otherwise.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) GetDisableConvertingQueriesToPreparedStatements() bool {
	if o == nil || IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		var ret bool
		return ret
	}
	return *o.DisableConvertingQueriesToPreparedStatements
}

// GetDisableConvertingQueriesToPreparedStatementsOk returns a tuple with the DisableConvertingQueriesToPreparedStatements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) GetDisableConvertingQueriesToPreparedStatementsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		return nil, false
	}
	return o.DisableConvertingQueriesToPreparedStatements, true
}

// HasDisableConvertingQueriesToPreparedStatements returns a boolean if a field has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) HasDisableConvertingQueriesToPreparedStatements() bool {
	if o != nil && !IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		return true
	}

	return false
}

// SetDisableConvertingQueriesToPreparedStatements gets a reference to the given bool and assigns it to the DisableConvertingQueriesToPreparedStatements field.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) SetDisableConvertingQueriesToPreparedStatements(v bool) {
	o.DisableConvertingQueriesToPreparedStatements = &v
}

// GetShowWriteGuiOnly returns the ShowWriteGuiOnly field value if set, zero value otherwise.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) GetShowWriteGuiOnly() bool {
	if o == nil || IsNil(o.ShowWriteGuiOnly) {
		var ret bool
		return ret
	}
	return *o.ShowWriteGuiOnly
}

// GetShowWriteGuiOnlyOk returns a tuple with the ShowWriteGuiOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) GetShowWriteGuiOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowWriteGuiOnly) {
		return nil, false
	}
	return o.ShowWriteGuiOnly, true
}

// HasShowWriteGuiOnly returns a boolean if a field has been set.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) HasShowWriteGuiOnly() bool {
	if o != nil && !IsNil(o.ShowWriteGuiOnly) {
		return true
	}

	return false
}

// SetShowWriteGuiOnly gets a reference to the given bool and assigns it to the ShowWriteGuiOnly field.
func (o *PostgresOptionsDatabaseOptionsAnyOf1) SetShowWriteGuiOnly(v bool) {
	o.ShowWriteGuiOnly = &v
}

func (o PostgresOptionsDatabaseOptionsAnyOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostgresOptionsDatabaseOptionsAnyOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionString) {
		toSerialize["connection_string"] = o.ConnectionString
	}
	if !IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		toSerialize["disable_converting_queries_to_prepared_statements"] = o.DisableConvertingQueriesToPreparedStatements
	}
	if !IsNil(o.ShowWriteGuiOnly) {
		toSerialize["show_write_gui_only"] = o.ShowWriteGuiOnly
	}
	return toSerialize, nil
}

type NullablePostgresOptionsDatabaseOptionsAnyOf1 struct {
	value *PostgresOptionsDatabaseOptionsAnyOf1
	isSet bool
}

func (v NullablePostgresOptionsDatabaseOptionsAnyOf1) Get() *PostgresOptionsDatabaseOptionsAnyOf1 {
	return v.value
}

func (v *NullablePostgresOptionsDatabaseOptionsAnyOf1) Set(val *PostgresOptionsDatabaseOptionsAnyOf1) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresOptionsDatabaseOptionsAnyOf1) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresOptionsDatabaseOptionsAnyOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresOptionsDatabaseOptionsAnyOf1(val *PostgresOptionsDatabaseOptionsAnyOf1) *NullablePostgresOptionsDatabaseOptionsAnyOf1 {
	return &NullablePostgresOptionsDatabaseOptionsAnyOf1{value: val, isSet: true}
}

func (v NullablePostgresOptionsDatabaseOptionsAnyOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresOptionsDatabaseOptionsAnyOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


