/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MySQLOptionsDatabaseOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MySQLOptionsDatabaseOptions{}

// MySQLOptionsDatabaseOptions struct for MySQLOptionsDatabaseOptions
type MySQLOptionsDatabaseOptions struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Name *string `json:"name,omitempty"`
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
	SslSettings *PostgresOptionsDatabaseOptionsAnyOfSslSettings `json:"ssl_settings,omitempty"`
	SshTunnelOptions *PostgresOptionsDatabaseOptionsAnyOfSshTunnelOptions `json:"ssh_tunnel_options,omitempty"`
	// This allows you to use Javascript to dynamically generate SQL but also turns off SQL injection protection.
	DisableConvertingQueriesToPreparedStatements *bool `json:"disable_converting_queries_to_prepared_statements,omitempty"`
	// This allows you to enable writing via only the restrictive GUI query editor.
	ShowWriteGuiOnly *bool `json:"show_write_gui_only,omitempty"`
	// Enable this to allow the Database Name to be overridden by a dynamically generated value. This allows using Retool with a database that has been sharded into several different databases.
	UseDynamicDatabaseNames *bool `json:"use_dynamic_database_names,omitempty"`
	// Enable this to allow the Database Host to be overridden by a dynamically generated value. This allows using Retool with several different databases.
	UseDynamicDatabaseHosts *bool `json:"use_dynamic_database_hosts,omitempty"`
	// This allows you to turn your MySQL date strings into Javascript Date objects.
	ConvertMysqlDatesToJavascript *bool `json:"convert_mysql_dates_to_javascript,omitempty"`
}

type _MySQLOptionsDatabaseOptions MySQLOptionsDatabaseOptions

// NewMySQLOptionsDatabaseOptions instantiates a new MySQLOptionsDatabaseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMySQLOptionsDatabaseOptions(host string, port string) *MySQLOptionsDatabaseOptions {
	this := MySQLOptionsDatabaseOptions{}
	this.Host = host
	this.Port = port
	var convertMysqlDatesToJavascript bool = true
	this.ConvertMysqlDatesToJavascript = &convertMysqlDatesToJavascript
	return &this
}

// NewMySQLOptionsDatabaseOptionsWithDefaults instantiates a new MySQLOptionsDatabaseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMySQLOptionsDatabaseOptionsWithDefaults() *MySQLOptionsDatabaseOptions {
	this := MySQLOptionsDatabaseOptions{}
	var convertMysqlDatesToJavascript bool = true
	this.ConvertMysqlDatesToJavascript = &convertMysqlDatesToJavascript
	return &this
}

// GetHost returns the Host field value
func (o *MySQLOptionsDatabaseOptions) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *MySQLOptionsDatabaseOptions) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *MySQLOptionsDatabaseOptions) GetPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *MySQLOptionsDatabaseOptions) SetPort(v string) {
	o.Port = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MySQLOptionsDatabaseOptions) SetName(v string) {
	o.Name = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MySQLOptionsDatabaseOptions) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *MySQLOptionsDatabaseOptions) SetPassword(v string) {
	o.Password = &v
}

// GetSslSettings returns the SslSettings field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetSslSettings() PostgresOptionsDatabaseOptionsAnyOfSslSettings {
	if o == nil || IsNil(o.SslSettings) {
		var ret PostgresOptionsDatabaseOptionsAnyOfSslSettings
		return ret
	}
	return *o.SslSettings
}

// GetSslSettingsOk returns a tuple with the SslSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetSslSettingsOk() (*PostgresOptionsDatabaseOptionsAnyOfSslSettings, bool) {
	if o == nil || IsNil(o.SslSettings) {
		return nil, false
	}
	return o.SslSettings, true
}

// HasSslSettings returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasSslSettings() bool {
	if o != nil && !IsNil(o.SslSettings) {
		return true
	}

	return false
}

// SetSslSettings gets a reference to the given PostgresOptionsDatabaseOptionsAnyOfSslSettings and assigns it to the SslSettings field.
func (o *MySQLOptionsDatabaseOptions) SetSslSettings(v PostgresOptionsDatabaseOptionsAnyOfSslSettings) {
	o.SslSettings = &v
}

// GetSshTunnelOptions returns the SshTunnelOptions field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetSshTunnelOptions() PostgresOptionsDatabaseOptionsAnyOfSshTunnelOptions {
	if o == nil || IsNil(o.SshTunnelOptions) {
		var ret PostgresOptionsDatabaseOptionsAnyOfSshTunnelOptions
		return ret
	}
	return *o.SshTunnelOptions
}

// GetSshTunnelOptionsOk returns a tuple with the SshTunnelOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetSshTunnelOptionsOk() (*PostgresOptionsDatabaseOptionsAnyOfSshTunnelOptions, bool) {
	if o == nil || IsNil(o.SshTunnelOptions) {
		return nil, false
	}
	return o.SshTunnelOptions, true
}

// HasSshTunnelOptions returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasSshTunnelOptions() bool {
	if o != nil && !IsNil(o.SshTunnelOptions) {
		return true
	}

	return false
}

// SetSshTunnelOptions gets a reference to the given PostgresOptionsDatabaseOptionsAnyOfSshTunnelOptions and assigns it to the SshTunnelOptions field.
func (o *MySQLOptionsDatabaseOptions) SetSshTunnelOptions(v PostgresOptionsDatabaseOptionsAnyOfSshTunnelOptions) {
	o.SshTunnelOptions = &v
}

// GetDisableConvertingQueriesToPreparedStatements returns the DisableConvertingQueriesToPreparedStatements field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetDisableConvertingQueriesToPreparedStatements() bool {
	if o == nil || IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		var ret bool
		return ret
	}
	return *o.DisableConvertingQueriesToPreparedStatements
}

// GetDisableConvertingQueriesToPreparedStatementsOk returns a tuple with the DisableConvertingQueriesToPreparedStatements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetDisableConvertingQueriesToPreparedStatementsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		return nil, false
	}
	return o.DisableConvertingQueriesToPreparedStatements, true
}

// HasDisableConvertingQueriesToPreparedStatements returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasDisableConvertingQueriesToPreparedStatements() bool {
	if o != nil && !IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		return true
	}

	return false
}

// SetDisableConvertingQueriesToPreparedStatements gets a reference to the given bool and assigns it to the DisableConvertingQueriesToPreparedStatements field.
func (o *MySQLOptionsDatabaseOptions) SetDisableConvertingQueriesToPreparedStatements(v bool) {
	o.DisableConvertingQueriesToPreparedStatements = &v
}

// GetShowWriteGuiOnly returns the ShowWriteGuiOnly field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetShowWriteGuiOnly() bool {
	if o == nil || IsNil(o.ShowWriteGuiOnly) {
		var ret bool
		return ret
	}
	return *o.ShowWriteGuiOnly
}

// GetShowWriteGuiOnlyOk returns a tuple with the ShowWriteGuiOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetShowWriteGuiOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowWriteGuiOnly) {
		return nil, false
	}
	return o.ShowWriteGuiOnly, true
}

// HasShowWriteGuiOnly returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasShowWriteGuiOnly() bool {
	if o != nil && !IsNil(o.ShowWriteGuiOnly) {
		return true
	}

	return false
}

// SetShowWriteGuiOnly gets a reference to the given bool and assigns it to the ShowWriteGuiOnly field.
func (o *MySQLOptionsDatabaseOptions) SetShowWriteGuiOnly(v bool) {
	o.ShowWriteGuiOnly = &v
}

// GetUseDynamicDatabaseNames returns the UseDynamicDatabaseNames field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetUseDynamicDatabaseNames() bool {
	if o == nil || IsNil(o.UseDynamicDatabaseNames) {
		var ret bool
		return ret
	}
	return *o.UseDynamicDatabaseNames
}

// GetUseDynamicDatabaseNamesOk returns a tuple with the UseDynamicDatabaseNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetUseDynamicDatabaseNamesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDynamicDatabaseNames) {
		return nil, false
	}
	return o.UseDynamicDatabaseNames, true
}

// HasUseDynamicDatabaseNames returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasUseDynamicDatabaseNames() bool {
	if o != nil && !IsNil(o.UseDynamicDatabaseNames) {
		return true
	}

	return false
}

// SetUseDynamicDatabaseNames gets a reference to the given bool and assigns it to the UseDynamicDatabaseNames field.
func (o *MySQLOptionsDatabaseOptions) SetUseDynamicDatabaseNames(v bool) {
	o.UseDynamicDatabaseNames = &v
}

// GetUseDynamicDatabaseHosts returns the UseDynamicDatabaseHosts field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetUseDynamicDatabaseHosts() bool {
	if o == nil || IsNil(o.UseDynamicDatabaseHosts) {
		var ret bool
		return ret
	}
	return *o.UseDynamicDatabaseHosts
}

// GetUseDynamicDatabaseHostsOk returns a tuple with the UseDynamicDatabaseHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetUseDynamicDatabaseHostsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDynamicDatabaseHosts) {
		return nil, false
	}
	return o.UseDynamicDatabaseHosts, true
}

// HasUseDynamicDatabaseHosts returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasUseDynamicDatabaseHosts() bool {
	if o != nil && !IsNil(o.UseDynamicDatabaseHosts) {
		return true
	}

	return false
}

// SetUseDynamicDatabaseHosts gets a reference to the given bool and assigns it to the UseDynamicDatabaseHosts field.
func (o *MySQLOptionsDatabaseOptions) SetUseDynamicDatabaseHosts(v bool) {
	o.UseDynamicDatabaseHosts = &v
}

// GetConvertMysqlDatesToJavascript returns the ConvertMysqlDatesToJavascript field value if set, zero value otherwise.
func (o *MySQLOptionsDatabaseOptions) GetConvertMysqlDatesToJavascript() bool {
	if o == nil || IsNil(o.ConvertMysqlDatesToJavascript) {
		var ret bool
		return ret
	}
	return *o.ConvertMysqlDatesToJavascript
}

// GetConvertMysqlDatesToJavascriptOk returns a tuple with the ConvertMysqlDatesToJavascript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLOptionsDatabaseOptions) GetConvertMysqlDatesToJavascriptOk() (*bool, bool) {
	if o == nil || IsNil(o.ConvertMysqlDatesToJavascript) {
		return nil, false
	}
	return o.ConvertMysqlDatesToJavascript, true
}

// HasConvertMysqlDatesToJavascript returns a boolean if a field has been set.
func (o *MySQLOptionsDatabaseOptions) HasConvertMysqlDatesToJavascript() bool {
	if o != nil && !IsNil(o.ConvertMysqlDatesToJavascript) {
		return true
	}

	return false
}

// SetConvertMysqlDatesToJavascript gets a reference to the given bool and assigns it to the ConvertMysqlDatesToJavascript field.
func (o *MySQLOptionsDatabaseOptions) SetConvertMysqlDatesToJavascript(v bool) {
	o.ConvertMysqlDatesToJavascript = &v
}

func (o MySQLOptionsDatabaseOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MySQLOptionsDatabaseOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.SslSettings) {
		toSerialize["ssl_settings"] = o.SslSettings
	}
	if !IsNil(o.SshTunnelOptions) {
		toSerialize["ssh_tunnel_options"] = o.SshTunnelOptions
	}
	if !IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		toSerialize["disable_converting_queries_to_prepared_statements"] = o.DisableConvertingQueriesToPreparedStatements
	}
	if !IsNil(o.ShowWriteGuiOnly) {
		toSerialize["show_write_gui_only"] = o.ShowWriteGuiOnly
	}
	if !IsNil(o.UseDynamicDatabaseNames) {
		toSerialize["use_dynamic_database_names"] = o.UseDynamicDatabaseNames
	}
	if !IsNil(o.UseDynamicDatabaseHosts) {
		toSerialize["use_dynamic_database_hosts"] = o.UseDynamicDatabaseHosts
	}
	if !IsNil(o.ConvertMysqlDatesToJavascript) {
		toSerialize["convert_mysql_dates_to_javascript"] = o.ConvertMysqlDatesToJavascript
	}
	return toSerialize, nil
}

func (o *MySQLOptionsDatabaseOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMySQLOptionsDatabaseOptions := _MySQLOptionsDatabaseOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMySQLOptionsDatabaseOptions)

	if err != nil {
		return err
	}

	*o = MySQLOptionsDatabaseOptions(varMySQLOptionsDatabaseOptions)

	return err
}

type NullableMySQLOptionsDatabaseOptions struct {
	value *MySQLOptionsDatabaseOptions
	isSet bool
}

func (v NullableMySQLOptionsDatabaseOptions) Get() *MySQLOptionsDatabaseOptions {
	return v.value
}

func (v *NullableMySQLOptionsDatabaseOptions) Set(val *MySQLOptionsDatabaseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableMySQLOptionsDatabaseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableMySQLOptionsDatabaseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMySQLOptionsDatabaseOptions(val *MySQLOptionsDatabaseOptions) *NullableMySQLOptionsDatabaseOptions {
	return &NullableMySQLOptionsDatabaseOptions{value: val, isSet: true}
}

func (v NullableMySQLOptionsDatabaseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMySQLOptionsDatabaseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


