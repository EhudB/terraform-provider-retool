/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserInviteAPIService UserInviteAPI service
type UserInviteAPIService service

type ApiUserInvitesGetRequest struct {
	ctx context.Context
	ApiService *UserInviteAPIService
}

func (r ApiUserInvitesGetRequest) Execute() (*UserInvitesGet200Response, *http.Response, error) {
	return r.ApiService.UserInvitesGetExecute(r)
}

/*
UserInvitesGet Get organization user invites

Available from API version 2.3.0+ and onprem version 3.24.0+. Gets a list of user invites

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUserInvitesGetRequest
*/
func (a *UserInviteAPIService) UserInvitesGet(ctx context.Context) ApiUserInvitesGetRequest {
	return ApiUserInvitesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserInvitesGet200Response
func (a *UserInviteAPIService) UserInvitesGetExecute(r ApiUserInvitesGetRequest) (*UserInvitesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserInvitesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInviteAPIService.UserInvitesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_invites"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserInvitesPostRequest struct {
	ctx context.Context
	ApiService *UserInviteAPIService
	userInvitesPostRequest *UserInvitesPostRequest
}

func (r ApiUserInvitesPostRequest) UserInvitesPostRequest(userInvitesPostRequest UserInvitesPostRequest) ApiUserInvitesPostRequest {
	r.userInvitesPostRequest = &userInvitesPostRequest
	return r
}

func (r ApiUserInvitesPostRequest) Execute() (*UserInvitesPost200Response, *http.Response, error) {
	return r.ApiService.UserInvitesPostExecute(r)
}

/*
UserInvitesPost Create a new user invite

Available from API version 2.4.0+ and onprem version 3.28.0+. Create a new user invite

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUserInvitesPostRequest
*/
func (a *UserInviteAPIService) UserInvitesPost(ctx context.Context) ApiUserInvitesPostRequest {
	return ApiUserInvitesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserInvitesPost200Response
func (a *UserInviteAPIService) UserInvitesPostExecute(r ApiUserInvitesPostRequest) (*UserInvitesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserInvitesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInviteAPIService.UserInvitesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_invites"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userInvitesPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserInvitesUserInviteIdDeleteRequest struct {
	ctx context.Context
	ApiService *UserInviteAPIService
	userInviteId string
}

func (r ApiUserInvitesUserInviteIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UserInvitesUserInviteIdDeleteExecute(r)
}

/*
UserInvitesUserInviteIdDelete Delete user invite

Available from API version 2.4.0+ and onprem version 3.26.0+. Returns the deleted user invite. The API token must have the "Users > Write" scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userInviteId
 @return ApiUserInvitesUserInviteIdDeleteRequest
*/
func (a *UserInviteAPIService) UserInvitesUserInviteIdDelete(ctx context.Context, userInviteId string) ApiUserInvitesUserInviteIdDeleteRequest {
	return ApiUserInvitesUserInviteIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		userInviteId: userInviteId,
	}
}

// Execute executes the request
func (a *UserInviteAPIService) UserInvitesUserInviteIdDeleteExecute(r ApiUserInvitesUserInviteIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInviteAPIService.UserInvitesUserInviteIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_invites/{userInviteId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userInviteId"+"}", url.PathEscape(parameterValueToString(r.userInviteId, "userInviteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUserInvitesUserInviteIdGetRequest struct {
	ctx context.Context
	ApiService *UserInviteAPIService
	userInviteId string
}

func (r ApiUserInvitesUserInviteIdGetRequest) Execute() (*UserInvitesUserInviteIdGet200Response, *http.Response, error) {
	return r.ApiService.UserInvitesUserInviteIdGetExecute(r)
}

/*
UserInvitesUserInviteIdGet Get user invite

Available from API version 2.4.0+ and onprem version 3.26.0+. Returns the user invite. The API token must have the "Users > Read" scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userInviteId
 @return ApiUserInvitesUserInviteIdGetRequest
*/
func (a *UserInviteAPIService) UserInvitesUserInviteIdGet(ctx context.Context, userInviteId string) ApiUserInvitesUserInviteIdGetRequest {
	return ApiUserInvitesUserInviteIdGetRequest{
		ApiService: a,
		ctx: ctx,
		userInviteId: userInviteId,
	}
}

// Execute executes the request
//  @return UserInvitesUserInviteIdGet200Response
func (a *UserInviteAPIService) UserInvitesUserInviteIdGetExecute(r ApiUserInvitesUserInviteIdGetRequest) (*UserInvitesUserInviteIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserInvitesUserInviteIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInviteAPIService.UserInvitesUserInviteIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_invites/{userInviteId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userInviteId"+"}", url.PathEscape(parameterValueToString(r.userInviteId, "userInviteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserInvitesUserInviteIdUserAttributesAttributeNameDeleteRequest struct {
	ctx context.Context
	ApiService *UserInviteAPIService
	userInviteId string
	attributeName string
}

func (r ApiUserInvitesUserInviteIdUserAttributesAttributeNameDeleteRequest) Execute() (*UserInvitesUserInviteIdUserAttributesAttributeNameDelete200Response, *http.Response, error) {
	return r.ApiService.UserInvitesUserInviteIdUserAttributesAttributeNameDeleteExecute(r)
}

/*
UserInvitesUserInviteIdUserAttributesAttributeNameDelete Delete a user attribute on a user invite

Available from API version 2.4.0+ and onprem version 3.28.0+. Delete a specified user attribute from an user invite

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userInviteId
 @param attributeName
 @return ApiUserInvitesUserInviteIdUserAttributesAttributeNameDeleteRequest
*/
func (a *UserInviteAPIService) UserInvitesUserInviteIdUserAttributesAttributeNameDelete(ctx context.Context, userInviteId string, attributeName string) ApiUserInvitesUserInviteIdUserAttributesAttributeNameDeleteRequest {
	return ApiUserInvitesUserInviteIdUserAttributesAttributeNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		userInviteId: userInviteId,
		attributeName: attributeName,
	}
}

// Execute executes the request
//  @return UserInvitesUserInviteIdUserAttributesAttributeNameDelete200Response
func (a *UserInviteAPIService) UserInvitesUserInviteIdUserAttributesAttributeNameDeleteExecute(r ApiUserInvitesUserInviteIdUserAttributesAttributeNameDeleteRequest) (*UserInvitesUserInviteIdUserAttributesAttributeNameDelete200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserInvitesUserInviteIdUserAttributesAttributeNameDelete200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInviteAPIService.UserInvitesUserInviteIdUserAttributesAttributeNameDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_invites/{userInviteId}/user_attributes/{attributeName}"
	localVarPath = strings.Replace(localVarPath, "{"+"userInviteId"+"}", url.PathEscape(parameterValueToString(r.userInviteId, "userInviteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeName"+"}", url.PathEscape(parameterValueToString(r.attributeName, "attributeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserInvitesUserInviteIdUserAttributesPostRequest struct {
	ctx context.Context
	ApiService *UserInviteAPIService
	userInviteId string
	userInvitesUserInviteIdUserAttributesPostRequest *UserInvitesUserInviteIdUserAttributesPostRequest
}

func (r ApiUserInvitesUserInviteIdUserAttributesPostRequest) UserInvitesUserInviteIdUserAttributesPostRequest(userInvitesUserInviteIdUserAttributesPostRequest UserInvitesUserInviteIdUserAttributesPostRequest) ApiUserInvitesUserInviteIdUserAttributesPostRequest {
	r.userInvitesUserInviteIdUserAttributesPostRequest = &userInvitesUserInviteIdUserAttributesPostRequest
	return r
}

func (r ApiUserInvitesUserInviteIdUserAttributesPostRequest) Execute() (*UserInvitesUserInviteIdUserAttributesPost200Response, *http.Response, error) {
	return r.ApiService.UserInvitesUserInviteIdUserAttributesPostExecute(r)
}

/*
UserInvitesUserInviteIdUserAttributesPost Add or update user attributes on a user invite

Available from API version 2.4.0+ and onprem version 3.28.0+. Add or update the user attributes of a user invite

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userInviteId
 @return ApiUserInvitesUserInviteIdUserAttributesPostRequest
*/
func (a *UserInviteAPIService) UserInvitesUserInviteIdUserAttributesPost(ctx context.Context, userInviteId string) ApiUserInvitesUserInviteIdUserAttributesPostRequest {
	return ApiUserInvitesUserInviteIdUserAttributesPostRequest{
		ApiService: a,
		ctx: ctx,
		userInviteId: userInviteId,
	}
}

// Execute executes the request
//  @return UserInvitesUserInviteIdUserAttributesPost200Response
func (a *UserInviteAPIService) UserInvitesUserInviteIdUserAttributesPostExecute(r ApiUserInvitesUserInviteIdUserAttributesPostRequest) (*UserInvitesUserInviteIdUserAttributesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserInvitesUserInviteIdUserAttributesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInviteAPIService.UserInvitesUserInviteIdUserAttributesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_invites/{userInviteId}/user_attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"userInviteId"+"}", url.PathEscape(parameterValueToString(r.userInviteId, "userInviteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userInvitesUserInviteIdUserAttributesPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
