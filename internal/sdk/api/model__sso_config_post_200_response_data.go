/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SsoConfigPost200ResponseData - Result of setting SSO configuration
type SsoConfigPost200ResponseData struct {
	SsoConfigPostRequestDataOneOf *SsoConfigPostRequestDataOneOf
	SsoConfigPostRequestDataOneOf1 *SsoConfigPostRequestDataOneOf1
	SsoConfigPostRequestDataOneOf2 *SsoConfigPostRequestDataOneOf2
	SsoConfigPostRequestDataOneOf3 *SsoConfigPostRequestDataOneOf3
	SsoConfigPostRequestDataOneOf4 *SsoConfigPostRequestDataOneOf4
}

// SsoConfigPostRequestDataOneOfAsSsoConfigPost200ResponseData is a convenience function that returns SsoConfigPostRequestDataOneOf wrapped in SsoConfigPost200ResponseData
func SsoConfigPostRequestDataOneOfAsSsoConfigPost200ResponseData(v *SsoConfigPostRequestDataOneOf) SsoConfigPost200ResponseData {
	return SsoConfigPost200ResponseData{
		SsoConfigPostRequestDataOneOf: v,
	}
}

// SsoConfigPostRequestDataOneOf1AsSsoConfigPost200ResponseData is a convenience function that returns SsoConfigPostRequestDataOneOf1 wrapped in SsoConfigPost200ResponseData
func SsoConfigPostRequestDataOneOf1AsSsoConfigPost200ResponseData(v *SsoConfigPostRequestDataOneOf1) SsoConfigPost200ResponseData {
	return SsoConfigPost200ResponseData{
		SsoConfigPostRequestDataOneOf1: v,
	}
}

// SsoConfigPostRequestDataOneOf2AsSsoConfigPost200ResponseData is a convenience function that returns SsoConfigPostRequestDataOneOf2 wrapped in SsoConfigPost200ResponseData
func SsoConfigPostRequestDataOneOf2AsSsoConfigPost200ResponseData(v *SsoConfigPostRequestDataOneOf2) SsoConfigPost200ResponseData {
	return SsoConfigPost200ResponseData{
		SsoConfigPostRequestDataOneOf2: v,
	}
}

// SsoConfigPostRequestDataOneOf3AsSsoConfigPost200ResponseData is a convenience function that returns SsoConfigPostRequestDataOneOf3 wrapped in SsoConfigPost200ResponseData
func SsoConfigPostRequestDataOneOf3AsSsoConfigPost200ResponseData(v *SsoConfigPostRequestDataOneOf3) SsoConfigPost200ResponseData {
	return SsoConfigPost200ResponseData{
		SsoConfigPostRequestDataOneOf3: v,
	}
}

// SsoConfigPostRequestDataOneOf4AsSsoConfigPost200ResponseData is a convenience function that returns SsoConfigPostRequestDataOneOf4 wrapped in SsoConfigPost200ResponseData
func SsoConfigPostRequestDataOneOf4AsSsoConfigPost200ResponseData(v *SsoConfigPostRequestDataOneOf4) SsoConfigPost200ResponseData {
	return SsoConfigPost200ResponseData{
		SsoConfigPostRequestDataOneOf4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SsoConfigPost200ResponseData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SsoConfigPostRequestDataOneOf
	err = newStrictDecoder(data).Decode(&dst.SsoConfigPostRequestDataOneOf)
	if err == nil {
		jsonSsoConfigPostRequestDataOneOf, _ := json.Marshal(dst.SsoConfigPostRequestDataOneOf)
		if string(jsonSsoConfigPostRequestDataOneOf) == "{}" { // empty struct
			dst.SsoConfigPostRequestDataOneOf = nil
		} else {
			match++
		}
	} else {
		dst.SsoConfigPostRequestDataOneOf = nil
	}

	// try to unmarshal data into SsoConfigPostRequestDataOneOf1
	err = newStrictDecoder(data).Decode(&dst.SsoConfigPostRequestDataOneOf1)
	if err == nil {
		jsonSsoConfigPostRequestDataOneOf1, _ := json.Marshal(dst.SsoConfigPostRequestDataOneOf1)
		if string(jsonSsoConfigPostRequestDataOneOf1) == "{}" { // empty struct
			dst.SsoConfigPostRequestDataOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.SsoConfigPostRequestDataOneOf1 = nil
	}

	// try to unmarshal data into SsoConfigPostRequestDataOneOf2
	err = newStrictDecoder(data).Decode(&dst.SsoConfigPostRequestDataOneOf2)
	if err == nil {
		jsonSsoConfigPostRequestDataOneOf2, _ := json.Marshal(dst.SsoConfigPostRequestDataOneOf2)
		if string(jsonSsoConfigPostRequestDataOneOf2) == "{}" { // empty struct
			dst.SsoConfigPostRequestDataOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.SsoConfigPostRequestDataOneOf2 = nil
	}

	// try to unmarshal data into SsoConfigPostRequestDataOneOf3
	err = newStrictDecoder(data).Decode(&dst.SsoConfigPostRequestDataOneOf3)
	if err == nil {
		jsonSsoConfigPostRequestDataOneOf3, _ := json.Marshal(dst.SsoConfigPostRequestDataOneOf3)
		if string(jsonSsoConfigPostRequestDataOneOf3) == "{}" { // empty struct
			dst.SsoConfigPostRequestDataOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.SsoConfigPostRequestDataOneOf3 = nil
	}

	// try to unmarshal data into SsoConfigPostRequestDataOneOf4
	err = newStrictDecoder(data).Decode(&dst.SsoConfigPostRequestDataOneOf4)
	if err == nil {
		jsonSsoConfigPostRequestDataOneOf4, _ := json.Marshal(dst.SsoConfigPostRequestDataOneOf4)
		if string(jsonSsoConfigPostRequestDataOneOf4) == "{}" { // empty struct
			dst.SsoConfigPostRequestDataOneOf4 = nil
		} else {
			match++
		}
	} else {
		dst.SsoConfigPostRequestDataOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SsoConfigPostRequestDataOneOf = nil
		dst.SsoConfigPostRequestDataOneOf1 = nil
		dst.SsoConfigPostRequestDataOneOf2 = nil
		dst.SsoConfigPostRequestDataOneOf3 = nil
		dst.SsoConfigPostRequestDataOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SsoConfigPost200ResponseData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SsoConfigPost200ResponseData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SsoConfigPost200ResponseData) MarshalJSON() ([]byte, error) {
	if src.SsoConfigPostRequestDataOneOf != nil {
		return json.Marshal(&src.SsoConfigPostRequestDataOneOf)
	}

	if src.SsoConfigPostRequestDataOneOf1 != nil {
		return json.Marshal(&src.SsoConfigPostRequestDataOneOf1)
	}

	if src.SsoConfigPostRequestDataOneOf2 != nil {
		return json.Marshal(&src.SsoConfigPostRequestDataOneOf2)
	}

	if src.SsoConfigPostRequestDataOneOf3 != nil {
		return json.Marshal(&src.SsoConfigPostRequestDataOneOf3)
	}

	if src.SsoConfigPostRequestDataOneOf4 != nil {
		return json.Marshal(&src.SsoConfigPostRequestDataOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SsoConfigPost200ResponseData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SsoConfigPostRequestDataOneOf != nil {
		return obj.SsoConfigPostRequestDataOneOf
	}

	if obj.SsoConfigPostRequestDataOneOf1 != nil {
		return obj.SsoConfigPostRequestDataOneOf1
	}

	if obj.SsoConfigPostRequestDataOneOf2 != nil {
		return obj.SsoConfigPostRequestDataOneOf2
	}

	if obj.SsoConfigPostRequestDataOneOf3 != nil {
		return obj.SsoConfigPostRequestDataOneOf3
	}

	if obj.SsoConfigPostRequestDataOneOf4 != nil {
		return obj.SsoConfigPostRequestDataOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableSsoConfigPost200ResponseData struct {
	value *SsoConfigPost200ResponseData
	isSet bool
}

func (v NullableSsoConfigPost200ResponseData) Get() *SsoConfigPost200ResponseData {
	return v.value
}

func (v *NullableSsoConfigPost200ResponseData) Set(val *SsoConfigPost200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoConfigPost200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoConfigPost200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoConfigPost200ResponseData(val *SsoConfigPost200ResponseData) *NullableSsoConfigPost200ResponseData {
	return &NullableSsoConfigPost200ResponseData{value: val, isSet: true}
}

func (v NullableSsoConfigPost200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoConfigPost200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


