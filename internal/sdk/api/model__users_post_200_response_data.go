/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UsersPost200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersPost200ResponseData{}

// UsersPost200ResponseData The created user
type UsersPost200ResponseData struct {
	// The id of the user
	Id string `json:"id"`
	// The legacy id of the user
	LegacyId string `json:"legacy_id"`
	// The email of the user
	Email string `json:"email"`
	// Whether the user is active or not
	Active bool `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	LastActive NullableTime `json:"last_active"`
	// The first name of the user
	FirstName NullableString `json:"first_name"`
	// The last name of the user
	LastName NullableString `json:"last_name"`
	Metadata map[string]interface{} `json:"metadata"`
}

type _UsersPost200ResponseData UsersPost200ResponseData

// NewUsersPost200ResponseData instantiates a new UsersPost200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersPost200ResponseData(id string, legacyId string, email string, active bool, createdAt time.Time, lastActive NullableTime, firstName NullableString, lastName NullableString, metadata map[string]interface{}) *UsersPost200ResponseData {
	this := UsersPost200ResponseData{}
	this.Id = id
	this.LegacyId = legacyId
	this.Email = email
	this.Active = active
	this.CreatedAt = createdAt
	this.LastActive = lastActive
	this.FirstName = firstName
	this.LastName = lastName
	this.Metadata = metadata
	return &this
}

// NewUsersPost200ResponseDataWithDefaults instantiates a new UsersPost200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersPost200ResponseDataWithDefaults() *UsersPost200ResponseData {
	this := UsersPost200ResponseData{}
	return &this
}

// GetId returns the Id field value
func (o *UsersPost200ResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UsersPost200ResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UsersPost200ResponseData) SetId(v string) {
	o.Id = v
}

// GetLegacyId returns the LegacyId field value
func (o *UsersPost200ResponseData) GetLegacyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LegacyId
}

// GetLegacyIdOk returns a tuple with the LegacyId field value
// and a boolean to check if the value has been set.
func (o *UsersPost200ResponseData) GetLegacyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LegacyId, true
}

// SetLegacyId sets field value
func (o *UsersPost200ResponseData) SetLegacyId(v string) {
	o.LegacyId = v
}

// GetEmail returns the Email field value
func (o *UsersPost200ResponseData) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UsersPost200ResponseData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UsersPost200ResponseData) SetEmail(v string) {
	o.Email = v
}

// GetActive returns the Active field value
func (o *UsersPost200ResponseData) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *UsersPost200ResponseData) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *UsersPost200ResponseData) SetActive(v bool) {
	o.Active = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UsersPost200ResponseData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UsersPost200ResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UsersPost200ResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastActive returns the LastActive field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *UsersPost200ResponseData) GetLastActive() time.Time {
	if o == nil || o.LastActive.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastActive.Get()
}

// GetLastActiveOk returns a tuple with the LastActive field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersPost200ResponseData) GetLastActiveOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastActive.Get(), o.LastActive.IsSet()
}

// SetLastActive sets field value
func (o *UsersPost200ResponseData) SetLastActive(v time.Time) {
	o.LastActive.Set(&v)
}

// GetFirstName returns the FirstName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UsersPost200ResponseData) GetFirstName() string {
	if o == nil || o.FirstName.Get() == nil {
		var ret string
		return ret
	}

	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersPost200ResponseData) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// SetFirstName sets field value
func (o *UsersPost200ResponseData) SetFirstName(v string) {
	o.FirstName.Set(&v)
}

// GetLastName returns the LastName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UsersPost200ResponseData) GetLastName() string {
	if o == nil || o.LastName.Get() == nil {
		var ret string
		return ret
	}

	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersPost200ResponseData) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// SetLastName sets field value
func (o *UsersPost200ResponseData) SetLastName(v string) {
	o.LastName.Set(&v)
}

// GetMetadata returns the Metadata field value
func (o *UsersPost200ResponseData) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *UsersPost200ResponseData) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *UsersPost200ResponseData) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o UsersPost200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersPost200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["legacy_id"] = o.LegacyId
	toSerialize["email"] = o.Email
	toSerialize["active"] = o.Active
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["last_active"] = o.LastActive.Get()
	toSerialize["first_name"] = o.FirstName.Get()
	toSerialize["last_name"] = o.LastName.Get()
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *UsersPost200ResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"legacy_id",
		"email",
		"active",
		"created_at",
		"last_active",
		"first_name",
		"last_name",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsersPost200ResponseData := _UsersPost200ResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsersPost200ResponseData)

	if err != nil {
		return err
	}

	*o = UsersPost200ResponseData(varUsersPost200ResponseData)

	return err
}

type NullableUsersPost200ResponseData struct {
	value *UsersPost200ResponseData
	isSet bool
}

func (v NullableUsersPost200ResponseData) Get() *UsersPost200ResponseData {
	return v.value
}

func (v *NullableUsersPost200ResponseData) Set(val *UsersPost200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersPost200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersPost200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersPost200ResponseData(val *UsersPost200ResponseData) *NullableUsersPost200ResponseData {
	return &NullableUsersPost200ResponseData{value: val, isSet: true}
}

func (v NullableUsersPost200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersPost200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


