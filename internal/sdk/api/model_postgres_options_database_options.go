/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// PostgresOptionsDatabaseOptions struct for PostgresOptionsDatabaseOptions
type PostgresOptionsDatabaseOptions struct {
	PostgresOptionsDatabaseOptionsAnyOf *PostgresOptionsDatabaseOptionsAnyOf
	PostgresOptionsDatabaseOptionsAnyOf1 *PostgresOptionsDatabaseOptionsAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PostgresOptionsDatabaseOptions) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into PostgresOptionsDatabaseOptionsAnyOf
	err = json.Unmarshal(data, &dst.PostgresOptionsDatabaseOptionsAnyOf);
	if err == nil {
		jsonPostgresOptionsDatabaseOptionsAnyOf, _ := json.Marshal(dst.PostgresOptionsDatabaseOptionsAnyOf)
		if string(jsonPostgresOptionsDatabaseOptionsAnyOf) == "{}" { // empty struct
			dst.PostgresOptionsDatabaseOptionsAnyOf = nil
		} else {
			return nil // data stored in dst.PostgresOptionsDatabaseOptionsAnyOf, return on the first match
		}
	} else {
		dst.PostgresOptionsDatabaseOptionsAnyOf = nil
	}

	// try to unmarshal JSON data into PostgresOptionsDatabaseOptionsAnyOf1
	err = json.Unmarshal(data, &dst.PostgresOptionsDatabaseOptionsAnyOf1);
	if err == nil {
		jsonPostgresOptionsDatabaseOptionsAnyOf1, _ := json.Marshal(dst.PostgresOptionsDatabaseOptionsAnyOf1)
		if string(jsonPostgresOptionsDatabaseOptionsAnyOf1) == "{}" { // empty struct
			dst.PostgresOptionsDatabaseOptionsAnyOf1 = nil
		} else {
			return nil // data stored in dst.PostgresOptionsDatabaseOptionsAnyOf1, return on the first match
		}
	} else {
		dst.PostgresOptionsDatabaseOptionsAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PostgresOptionsDatabaseOptions)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *PostgresOptionsDatabaseOptions) MarshalJSON() ([]byte, error) {
	if src.PostgresOptionsDatabaseOptionsAnyOf != nil {
		return json.Marshal(&src.PostgresOptionsDatabaseOptionsAnyOf)
	}

	if src.PostgresOptionsDatabaseOptionsAnyOf1 != nil {
		return json.Marshal(&src.PostgresOptionsDatabaseOptionsAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePostgresOptionsDatabaseOptions struct {
	value *PostgresOptionsDatabaseOptions
	isSet bool
}

func (v NullablePostgresOptionsDatabaseOptions) Get() *PostgresOptionsDatabaseOptions {
	return v.value
}

func (v *NullablePostgresOptionsDatabaseOptions) Set(val *PostgresOptionsDatabaseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresOptionsDatabaseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresOptionsDatabaseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresOptionsDatabaseOptions(val *PostgresOptionsDatabaseOptions) *NullablePostgresOptionsDatabaseOptions {
	return &NullablePostgresOptionsDatabaseOptions{value: val, isSet: true}
}

func (v NullablePostgresOptionsDatabaseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresOptionsDatabaseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


