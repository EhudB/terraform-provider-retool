/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnowflakeOptionsAuthenticationOptionsAnyOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeOptionsAuthenticationOptionsAnyOf1{}

// SnowflakeOptionsAuthenticationOptionsAnyOf1 struct for SnowflakeOptionsAuthenticationOptionsAnyOf1
type SnowflakeOptionsAuthenticationOptionsAnyOf1 struct {
	AuthenticationType string `json:"authentication_type"`
	Username string `json:"username"`
	PrivateKey string `json:"private_key"`
	PrivateKeyPassphrase *string `json:"private_key_passphrase,omitempty"`
}

type _SnowflakeOptionsAuthenticationOptionsAnyOf1 SnowflakeOptionsAuthenticationOptionsAnyOf1

// NewSnowflakeOptionsAuthenticationOptionsAnyOf1 instantiates a new SnowflakeOptionsAuthenticationOptionsAnyOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeOptionsAuthenticationOptionsAnyOf1(authenticationType string, username string, privateKey string) *SnowflakeOptionsAuthenticationOptionsAnyOf1 {
	this := SnowflakeOptionsAuthenticationOptionsAnyOf1{}
	this.AuthenticationType = authenticationType
	this.Username = username
	this.PrivateKey = privateKey
	return &this
}

// NewSnowflakeOptionsAuthenticationOptionsAnyOf1WithDefaults instantiates a new SnowflakeOptionsAuthenticationOptionsAnyOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeOptionsAuthenticationOptionsAnyOf1WithDefaults() *SnowflakeOptionsAuthenticationOptionsAnyOf1 {
	this := SnowflakeOptionsAuthenticationOptionsAnyOf1{}
	return &this
}

// GetAuthenticationType returns the AuthenticationType field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) GetAuthenticationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationType, true
}

// SetAuthenticationType sets field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) SetAuthenticationType(v string) {
	o.AuthenticationType = v
}

// GetUsername returns the Username field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) SetUsername(v string) {
	o.Username = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetPrivateKeyPassphrase returns the PrivateKeyPassphrase field value if set, zero value otherwise.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) GetPrivateKeyPassphrase() string {
	if o == nil || IsNil(o.PrivateKeyPassphrase) {
		var ret string
		return ret
	}
	return *o.PrivateKeyPassphrase
}

// GetPrivateKeyPassphraseOk returns a tuple with the PrivateKeyPassphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) GetPrivateKeyPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKeyPassphrase) {
		return nil, false
	}
	return o.PrivateKeyPassphrase, true
}

// HasPrivateKeyPassphrase returns a boolean if a field has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) HasPrivateKeyPassphrase() bool {
	if o != nil && !IsNil(o.PrivateKeyPassphrase) {
		return true
	}

	return false
}

// SetPrivateKeyPassphrase gets a reference to the given string and assigns it to the PrivateKeyPassphrase field.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) SetPrivateKeyPassphrase(v string) {
	o.PrivateKeyPassphrase = &v
}

func (o SnowflakeOptionsAuthenticationOptionsAnyOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeOptionsAuthenticationOptionsAnyOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authentication_type"] = o.AuthenticationType
	toSerialize["username"] = o.Username
	toSerialize["private_key"] = o.PrivateKey
	if !IsNil(o.PrivateKeyPassphrase) {
		toSerialize["private_key_passphrase"] = o.PrivateKeyPassphrase
	}
	return toSerialize, nil
}

func (o *SnowflakeOptionsAuthenticationOptionsAnyOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authentication_type",
		"username",
		"private_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnowflakeOptionsAuthenticationOptionsAnyOf1 := _SnowflakeOptionsAuthenticationOptionsAnyOf1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnowflakeOptionsAuthenticationOptionsAnyOf1)

	if err != nil {
		return err
	}

	*o = SnowflakeOptionsAuthenticationOptionsAnyOf1(varSnowflakeOptionsAuthenticationOptionsAnyOf1)

	return err
}

type NullableSnowflakeOptionsAuthenticationOptionsAnyOf1 struct {
	value *SnowflakeOptionsAuthenticationOptionsAnyOf1
	isSet bool
}

func (v NullableSnowflakeOptionsAuthenticationOptionsAnyOf1) Get() *SnowflakeOptionsAuthenticationOptionsAnyOf1 {
	return v.value
}

func (v *NullableSnowflakeOptionsAuthenticationOptionsAnyOf1) Set(val *SnowflakeOptionsAuthenticationOptionsAnyOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeOptionsAuthenticationOptionsAnyOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeOptionsAuthenticationOptionsAnyOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeOptionsAuthenticationOptionsAnyOf1(val *SnowflakeOptionsAuthenticationOptionsAnyOf1) *NullableSnowflakeOptionsAuthenticationOptionsAnyOf1 {
	return &NullableSnowflakeOptionsAuthenticationOptionsAnyOf1{value: val, isSet: true}
}

func (v NullableSnowflakeOptionsAuthenticationOptionsAnyOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeOptionsAuthenticationOptionsAnyOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


