/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnowflakeOptionsDatabaseOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeOptionsDatabaseOptions{}

// SnowflakeOptionsDatabaseOptions struct for SnowflakeOptionsDatabaseOptions
type SnowflakeOptionsDatabaseOptions struct {
	Name string `json:"name"`
	Schema *string `json:"schema,omitempty"`
	Warehouse *string `json:"warehouse,omitempty"`
	// This allows you to use Javascript to dynamically generate SQL but also turns off SQL injection protection.
	DisableConvertingQueriesToPreparedStatements *bool `json:"disable_converting_queries_to_prepared_statements,omitempty"`
	// This allows you to enable writing via only the restrictive GUI query editor.
	ShowWriteGuiOnly *bool `json:"show_write_gui_only,omitempty"`
}

type _SnowflakeOptionsDatabaseOptions SnowflakeOptionsDatabaseOptions

// NewSnowflakeOptionsDatabaseOptions instantiates a new SnowflakeOptionsDatabaseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeOptionsDatabaseOptions(name string) *SnowflakeOptionsDatabaseOptions {
	this := SnowflakeOptionsDatabaseOptions{}
	this.Name = name
	return &this
}

// NewSnowflakeOptionsDatabaseOptionsWithDefaults instantiates a new SnowflakeOptionsDatabaseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeOptionsDatabaseOptionsWithDefaults() *SnowflakeOptionsDatabaseOptions {
	this := SnowflakeOptionsDatabaseOptions{}
	return &this
}

// GetName returns the Name field value
func (o *SnowflakeOptionsDatabaseOptions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsDatabaseOptions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SnowflakeOptionsDatabaseOptions) SetName(v string) {
	o.Name = v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *SnowflakeOptionsDatabaseOptions) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsDatabaseOptions) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *SnowflakeOptionsDatabaseOptions) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *SnowflakeOptionsDatabaseOptions) SetSchema(v string) {
	o.Schema = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *SnowflakeOptionsDatabaseOptions) GetWarehouse() string {
	if o == nil || IsNil(o.Warehouse) {
		var ret string
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsDatabaseOptions) GetWarehouseOk() (*string, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *SnowflakeOptionsDatabaseOptions) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given string and assigns it to the Warehouse field.
func (o *SnowflakeOptionsDatabaseOptions) SetWarehouse(v string) {
	o.Warehouse = &v
}

// GetDisableConvertingQueriesToPreparedStatements returns the DisableConvertingQueriesToPreparedStatements field value if set, zero value otherwise.
func (o *SnowflakeOptionsDatabaseOptions) GetDisableConvertingQueriesToPreparedStatements() bool {
	if o == nil || IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		var ret bool
		return ret
	}
	return *o.DisableConvertingQueriesToPreparedStatements
}

// GetDisableConvertingQueriesToPreparedStatementsOk returns a tuple with the DisableConvertingQueriesToPreparedStatements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsDatabaseOptions) GetDisableConvertingQueriesToPreparedStatementsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		return nil, false
	}
	return o.DisableConvertingQueriesToPreparedStatements, true
}

// HasDisableConvertingQueriesToPreparedStatements returns a boolean if a field has been set.
func (o *SnowflakeOptionsDatabaseOptions) HasDisableConvertingQueriesToPreparedStatements() bool {
	if o != nil && !IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		return true
	}

	return false
}

// SetDisableConvertingQueriesToPreparedStatements gets a reference to the given bool and assigns it to the DisableConvertingQueriesToPreparedStatements field.
func (o *SnowflakeOptionsDatabaseOptions) SetDisableConvertingQueriesToPreparedStatements(v bool) {
	o.DisableConvertingQueriesToPreparedStatements = &v
}

// GetShowWriteGuiOnly returns the ShowWriteGuiOnly field value if set, zero value otherwise.
func (o *SnowflakeOptionsDatabaseOptions) GetShowWriteGuiOnly() bool {
	if o == nil || IsNil(o.ShowWriteGuiOnly) {
		var ret bool
		return ret
	}
	return *o.ShowWriteGuiOnly
}

// GetShowWriteGuiOnlyOk returns a tuple with the ShowWriteGuiOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsDatabaseOptions) GetShowWriteGuiOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowWriteGuiOnly) {
		return nil, false
	}
	return o.ShowWriteGuiOnly, true
}

// HasShowWriteGuiOnly returns a boolean if a field has been set.
func (o *SnowflakeOptionsDatabaseOptions) HasShowWriteGuiOnly() bool {
	if o != nil && !IsNil(o.ShowWriteGuiOnly) {
		return true
	}

	return false
}

// SetShowWriteGuiOnly gets a reference to the given bool and assigns it to the ShowWriteGuiOnly field.
func (o *SnowflakeOptionsDatabaseOptions) SetShowWriteGuiOnly(v bool) {
	o.ShowWriteGuiOnly = &v
}

func (o SnowflakeOptionsDatabaseOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeOptionsDatabaseOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	if !IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		toSerialize["disable_converting_queries_to_prepared_statements"] = o.DisableConvertingQueriesToPreparedStatements
	}
	if !IsNil(o.ShowWriteGuiOnly) {
		toSerialize["show_write_gui_only"] = o.ShowWriteGuiOnly
	}
	return toSerialize, nil
}

func (o *SnowflakeOptionsDatabaseOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnowflakeOptionsDatabaseOptions := _SnowflakeOptionsDatabaseOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnowflakeOptionsDatabaseOptions)

	if err != nil {
		return err
	}

	*o = SnowflakeOptionsDatabaseOptions(varSnowflakeOptionsDatabaseOptions)

	return err
}

type NullableSnowflakeOptionsDatabaseOptions struct {
	value *SnowflakeOptionsDatabaseOptions
	isSet bool
}

func (v NullableSnowflakeOptionsDatabaseOptions) Get() *SnowflakeOptionsDatabaseOptions {
	return v.value
}

func (v *NullableSnowflakeOptionsDatabaseOptions) Set(val *SnowflakeOptionsDatabaseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeOptionsDatabaseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeOptionsDatabaseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeOptionsDatabaseOptions(val *SnowflakeOptionsDatabaseOptions) *NullableSnowflakeOptionsDatabaseOptions {
	return &NullableSnowflakeOptionsDatabaseOptions{value: val, isSet: true}
}

func (v NullableSnowflakeOptionsDatabaseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeOptionsDatabaseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


