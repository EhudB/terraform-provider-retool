/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SourceControlTestDeployPost200ResponseData Source control test deploy response
type SourceControlTestDeployPost200ResponseData struct {
	SourceControlTestDeployPost200ResponseDataAnyOf *SourceControlTestDeployPost200ResponseDataAnyOf
	SourceControlTestDeployPost200ResponseDataAnyOf1 *SourceControlTestDeployPost200ResponseDataAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SourceControlTestDeployPost200ResponseData) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SourceControlTestDeployPost200ResponseDataAnyOf
	err = json.Unmarshal(data, &dst.SourceControlTestDeployPost200ResponseDataAnyOf);
	if err == nil {
		jsonSourceControlTestDeployPost200ResponseDataAnyOf, _ := json.Marshal(dst.SourceControlTestDeployPost200ResponseDataAnyOf)
		if string(jsonSourceControlTestDeployPost200ResponseDataAnyOf) == "{}" { // empty struct
			dst.SourceControlTestDeployPost200ResponseDataAnyOf = nil
		} else {
			return nil // data stored in dst.SourceControlTestDeployPost200ResponseDataAnyOf, return on the first match
		}
	} else {
		dst.SourceControlTestDeployPost200ResponseDataAnyOf = nil
	}

	// try to unmarshal JSON data into SourceControlTestDeployPost200ResponseDataAnyOf1
	err = json.Unmarshal(data, &dst.SourceControlTestDeployPost200ResponseDataAnyOf1);
	if err == nil {
		jsonSourceControlTestDeployPost200ResponseDataAnyOf1, _ := json.Marshal(dst.SourceControlTestDeployPost200ResponseDataAnyOf1)
		if string(jsonSourceControlTestDeployPost200ResponseDataAnyOf1) == "{}" { // empty struct
			dst.SourceControlTestDeployPost200ResponseDataAnyOf1 = nil
		} else {
			return nil // data stored in dst.SourceControlTestDeployPost200ResponseDataAnyOf1, return on the first match
		}
	} else {
		dst.SourceControlTestDeployPost200ResponseDataAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SourceControlTestDeployPost200ResponseData)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SourceControlTestDeployPost200ResponseData) MarshalJSON() ([]byte, error) {
	if src.SourceControlTestDeployPost200ResponseDataAnyOf != nil {
		return json.Marshal(&src.SourceControlTestDeployPost200ResponseDataAnyOf)
	}

	if src.SourceControlTestDeployPost200ResponseDataAnyOf1 != nil {
		return json.Marshal(&src.SourceControlTestDeployPost200ResponseDataAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSourceControlTestDeployPost200ResponseData struct {
	value *SourceControlTestDeployPost200ResponseData
	isSet bool
}

func (v NullableSourceControlTestDeployPost200ResponseData) Get() *SourceControlTestDeployPost200ResponseData {
	return v.value
}

func (v *NullableSourceControlTestDeployPost200ResponseData) Set(val *SourceControlTestDeployPost200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlTestDeployPost200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlTestDeployPost200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlTestDeployPost200ResponseData(val *SourceControlTestDeployPost200ResponseData) *NullableSourceControlTestDeployPost200ResponseData {
	return &NullableSourceControlTestDeployPost200ResponseData{value: val, isSet: true}
}

func (v NullableSourceControlTestDeployPost200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlTestDeployPost200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


