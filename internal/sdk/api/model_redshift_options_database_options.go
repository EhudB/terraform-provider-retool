/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RedshiftOptionsDatabaseOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedshiftOptionsDatabaseOptions{}

// RedshiftOptionsDatabaseOptions struct for RedshiftOptionsDatabaseOptions
type RedshiftOptionsDatabaseOptions struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Name *string `json:"name,omitempty"`
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
	SslSettings *RedshiftOptionsDatabaseOptionsSslSettings `json:"ssl_settings,omitempty"`
	// This allows you to use Javascript to dynamically generate SQL but also turns off SQL injection protection.
	DisableConvertingQueriesToPreparedStatements *bool `json:"disable_converting_queries_to_prepared_statements,omitempty"`
	// This allows you to enable writing via only the restrictive GUI query editor.
	ShowWriteGuiOnly *bool `json:"show_write_gui_only,omitempty"`
}

type _RedshiftOptionsDatabaseOptions RedshiftOptionsDatabaseOptions

// NewRedshiftOptionsDatabaseOptions instantiates a new RedshiftOptionsDatabaseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedshiftOptionsDatabaseOptions(host string, port string) *RedshiftOptionsDatabaseOptions {
	this := RedshiftOptionsDatabaseOptions{}
	this.Host = host
	this.Port = port
	return &this
}

// NewRedshiftOptionsDatabaseOptionsWithDefaults instantiates a new RedshiftOptionsDatabaseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedshiftOptionsDatabaseOptionsWithDefaults() *RedshiftOptionsDatabaseOptions {
	this := RedshiftOptionsDatabaseOptions{}
	return &this
}

// GetHost returns the Host field value
func (o *RedshiftOptionsDatabaseOptions) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *RedshiftOptionsDatabaseOptions) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *RedshiftOptionsDatabaseOptions) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *RedshiftOptionsDatabaseOptions) GetPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *RedshiftOptionsDatabaseOptions) GetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *RedshiftOptionsDatabaseOptions) SetPort(v string) {
	o.Port = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RedshiftOptionsDatabaseOptions) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftOptionsDatabaseOptions) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RedshiftOptionsDatabaseOptions) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RedshiftOptionsDatabaseOptions) SetName(v string) {
	o.Name = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *RedshiftOptionsDatabaseOptions) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftOptionsDatabaseOptions) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *RedshiftOptionsDatabaseOptions) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *RedshiftOptionsDatabaseOptions) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *RedshiftOptionsDatabaseOptions) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftOptionsDatabaseOptions) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *RedshiftOptionsDatabaseOptions) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *RedshiftOptionsDatabaseOptions) SetPassword(v string) {
	o.Password = &v
}

// GetSslSettings returns the SslSettings field value if set, zero value otherwise.
func (o *RedshiftOptionsDatabaseOptions) GetSslSettings() RedshiftOptionsDatabaseOptionsSslSettings {
	if o == nil || IsNil(o.SslSettings) {
		var ret RedshiftOptionsDatabaseOptionsSslSettings
		return ret
	}
	return *o.SslSettings
}

// GetSslSettingsOk returns a tuple with the SslSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftOptionsDatabaseOptions) GetSslSettingsOk() (*RedshiftOptionsDatabaseOptionsSslSettings, bool) {
	if o == nil || IsNil(o.SslSettings) {
		return nil, false
	}
	return o.SslSettings, true
}

// HasSslSettings returns a boolean if a field has been set.
func (o *RedshiftOptionsDatabaseOptions) HasSslSettings() bool {
	if o != nil && !IsNil(o.SslSettings) {
		return true
	}

	return false
}

// SetSslSettings gets a reference to the given RedshiftOptionsDatabaseOptionsSslSettings and assigns it to the SslSettings field.
func (o *RedshiftOptionsDatabaseOptions) SetSslSettings(v RedshiftOptionsDatabaseOptionsSslSettings) {
	o.SslSettings = &v
}

// GetDisableConvertingQueriesToPreparedStatements returns the DisableConvertingQueriesToPreparedStatements field value if set, zero value otherwise.
func (o *RedshiftOptionsDatabaseOptions) GetDisableConvertingQueriesToPreparedStatements() bool {
	if o == nil || IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		var ret bool
		return ret
	}
	return *o.DisableConvertingQueriesToPreparedStatements
}

// GetDisableConvertingQueriesToPreparedStatementsOk returns a tuple with the DisableConvertingQueriesToPreparedStatements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftOptionsDatabaseOptions) GetDisableConvertingQueriesToPreparedStatementsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		return nil, false
	}
	return o.DisableConvertingQueriesToPreparedStatements, true
}

// HasDisableConvertingQueriesToPreparedStatements returns a boolean if a field has been set.
func (o *RedshiftOptionsDatabaseOptions) HasDisableConvertingQueriesToPreparedStatements() bool {
	if o != nil && !IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		return true
	}

	return false
}

// SetDisableConvertingQueriesToPreparedStatements gets a reference to the given bool and assigns it to the DisableConvertingQueriesToPreparedStatements field.
func (o *RedshiftOptionsDatabaseOptions) SetDisableConvertingQueriesToPreparedStatements(v bool) {
	o.DisableConvertingQueriesToPreparedStatements = &v
}

// GetShowWriteGuiOnly returns the ShowWriteGuiOnly field value if set, zero value otherwise.
func (o *RedshiftOptionsDatabaseOptions) GetShowWriteGuiOnly() bool {
	if o == nil || IsNil(o.ShowWriteGuiOnly) {
		var ret bool
		return ret
	}
	return *o.ShowWriteGuiOnly
}

// GetShowWriteGuiOnlyOk returns a tuple with the ShowWriteGuiOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftOptionsDatabaseOptions) GetShowWriteGuiOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowWriteGuiOnly) {
		return nil, false
	}
	return o.ShowWriteGuiOnly, true
}

// HasShowWriteGuiOnly returns a boolean if a field has been set.
func (o *RedshiftOptionsDatabaseOptions) HasShowWriteGuiOnly() bool {
	if o != nil && !IsNil(o.ShowWriteGuiOnly) {
		return true
	}

	return false
}

// SetShowWriteGuiOnly gets a reference to the given bool and assigns it to the ShowWriteGuiOnly field.
func (o *RedshiftOptionsDatabaseOptions) SetShowWriteGuiOnly(v bool) {
	o.ShowWriteGuiOnly = &v
}

func (o RedshiftOptionsDatabaseOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedshiftOptionsDatabaseOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.SslSettings) {
		toSerialize["ssl_settings"] = o.SslSettings
	}
	if !IsNil(o.DisableConvertingQueriesToPreparedStatements) {
		toSerialize["disable_converting_queries_to_prepared_statements"] = o.DisableConvertingQueriesToPreparedStatements
	}
	if !IsNil(o.ShowWriteGuiOnly) {
		toSerialize["show_write_gui_only"] = o.ShowWriteGuiOnly
	}
	return toSerialize, nil
}

func (o *RedshiftOptionsDatabaseOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRedshiftOptionsDatabaseOptions := _RedshiftOptionsDatabaseOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRedshiftOptionsDatabaseOptions)

	if err != nil {
		return err
	}

	*o = RedshiftOptionsDatabaseOptions(varRedshiftOptionsDatabaseOptions)

	return err
}

type NullableRedshiftOptionsDatabaseOptions struct {
	value *RedshiftOptionsDatabaseOptions
	isSet bool
}

func (v NullableRedshiftOptionsDatabaseOptions) Get() *RedshiftOptionsDatabaseOptions {
	return v.value
}

func (v *NullableRedshiftOptionsDatabaseOptions) Set(val *RedshiftOptionsDatabaseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRedshiftOptionsDatabaseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRedshiftOptionsDatabaseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedshiftOptionsDatabaseOptions(val *RedshiftOptionsDatabaseOptions) *NullableRedshiftOptionsDatabaseOptions {
	return &NullableRedshiftOptionsDatabaseOptions{value: val, isSet: true}
}

func (v NullableRedshiftOptionsDatabaseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedshiftOptionsDatabaseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


