/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccessRequestAPIService AccessRequestAPI service
type AccessRequestAPIService service

type ApiAccessRequestsAccessRequestIdGetRequest struct {
	ctx context.Context
	ApiService *AccessRequestAPIService
	accessRequestId string
}

func (r ApiAccessRequestsAccessRequestIdGetRequest) Execute() (*AccessRequestsAccessRequestIdGet200Response, *http.Response, error) {
	return r.ApiService.AccessRequestsAccessRequestIdGetExecute(r)
}

/*
AccessRequestsAccessRequestIdGet Get access request

Available from API version 2.2.0+ and onprem version 3.24.0+. Returns the access request. The API token must have the "Users > Read" scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessRequestId
 @return ApiAccessRequestsAccessRequestIdGetRequest
*/
func (a *AccessRequestAPIService) AccessRequestsAccessRequestIdGet(ctx context.Context, accessRequestId string) ApiAccessRequestsAccessRequestIdGetRequest {
	return ApiAccessRequestsAccessRequestIdGetRequest{
		ApiService: a,
		ctx: ctx,
		accessRequestId: accessRequestId,
	}
}

// Execute executes the request
//  @return AccessRequestsAccessRequestIdGet200Response
func (a *AccessRequestAPIService) AccessRequestsAccessRequestIdGetExecute(r ApiAccessRequestsAccessRequestIdGetRequest) (*AccessRequestsAccessRequestIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessRequestsAccessRequestIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessRequestAPIService.AccessRequestsAccessRequestIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_requests/{accessRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accessRequestId"+"}", url.PathEscape(parameterValueToString(r.accessRequestId, "accessRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccessRequestsAccessRequestIdPatchRequest struct {
	ctx context.Context
	ApiService *AccessRequestAPIService
	accessRequestId string
	accessRequestsAccessRequestIdPatchRequest *AccessRequestsAccessRequestIdPatchRequest
}

func (r ApiAccessRequestsAccessRequestIdPatchRequest) AccessRequestsAccessRequestIdPatchRequest(accessRequestsAccessRequestIdPatchRequest AccessRequestsAccessRequestIdPatchRequest) ApiAccessRequestsAccessRequestIdPatchRequest {
	r.accessRequestsAccessRequestIdPatchRequest = &accessRequestsAccessRequestIdPatchRequest
	return r
}

func (r ApiAccessRequestsAccessRequestIdPatchRequest) Execute() (*AccessRequestsAccessRequestIdPatch200Response, *http.Response, error) {
	return r.ApiService.AccessRequestsAccessRequestIdPatchExecute(r)
}

/*
AccessRequestsAccessRequestIdPatch Approve or deny an access request

Available from API version 2.3.0+ and onprem version 3.24.0+. Approve or deny an access request in your organization. The API token must have the "Users > Write" scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessRequestId
 @return ApiAccessRequestsAccessRequestIdPatchRequest
*/
func (a *AccessRequestAPIService) AccessRequestsAccessRequestIdPatch(ctx context.Context, accessRequestId string) ApiAccessRequestsAccessRequestIdPatchRequest {
	return ApiAccessRequestsAccessRequestIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		accessRequestId: accessRequestId,
	}
}

// Execute executes the request
//  @return AccessRequestsAccessRequestIdPatch200Response
func (a *AccessRequestAPIService) AccessRequestsAccessRequestIdPatchExecute(r ApiAccessRequestsAccessRequestIdPatchRequest) (*AccessRequestsAccessRequestIdPatch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessRequestsAccessRequestIdPatch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessRequestAPIService.AccessRequestsAccessRequestIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_requests/{accessRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accessRequestId"+"}", url.PathEscape(parameterValueToString(r.accessRequestId, "accessRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accessRequestsAccessRequestIdPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccessRequestsGetRequest struct {
	ctx context.Context
	ApiService *AccessRequestAPIService
	status *string
}

func (r ApiAccessRequestsGetRequest) Status(status string) ApiAccessRequestsGetRequest {
	r.status = &status
	return r
}

func (r ApiAccessRequestsGetRequest) Execute() (*AccessRequestsGet200Response, *http.Response, error) {
	return r.ApiService.AccessRequestsGetExecute(r)
}

/*
AccessRequestsGet Get organization access requests

Available from API version 2.3.0+ and onprem version 3.24.0+. Gets a list of access requests. The API token must have the "Users > Read" scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccessRequestsGetRequest
*/
func (a *AccessRequestAPIService) AccessRequestsGet(ctx context.Context) ApiAccessRequestsGetRequest {
	return ApiAccessRequestsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccessRequestsGet200Response
func (a *AccessRequestAPIService) AccessRequestsGetExecute(r ApiAccessRequestsGetRequest) (*AccessRequestsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessRequestsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessRequestAPIService.AccessRequestsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
