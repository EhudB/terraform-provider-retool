/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// RestAPIOptionsAuthenticationOptions Note that custom auth is not yet supported.
type RestAPIOptionsAuthenticationOptions struct {
	RestAPIOptionsAuthenticationOptionsAnyOf *RestAPIOptionsAuthenticationOptionsAnyOf
	RestAPIOptionsAuthenticationOptionsAnyOf1 *RestAPIOptionsAuthenticationOptionsAnyOf1
	RestAPIOptionsAuthenticationOptionsAnyOf2 *RestAPIOptionsAuthenticationOptionsAnyOf2
	RestAPIOptionsAuthenticationOptionsAnyOf3 *RestAPIOptionsAuthenticationOptionsAnyOf3
	RestAPIOptionsAuthenticationOptionsAnyOf4 *RestAPIOptionsAuthenticationOptionsAnyOf4
	RestAPIOptionsAuthenticationOptionsAnyOf5 *RestAPIOptionsAuthenticationOptionsAnyOf5
	RestAPIOptionsAuthenticationOptionsAnyOf6 *RestAPIOptionsAuthenticationOptionsAnyOf6
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *RestAPIOptionsAuthenticationOptions) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into RestAPIOptionsAuthenticationOptionsAnyOf
	err = json.Unmarshal(data, &dst.RestAPIOptionsAuthenticationOptionsAnyOf);
	if err == nil {
		jsonRestAPIOptionsAuthenticationOptionsAnyOf, _ := json.Marshal(dst.RestAPIOptionsAuthenticationOptionsAnyOf)
		if string(jsonRestAPIOptionsAuthenticationOptionsAnyOf) == "{}" { // empty struct
			dst.RestAPIOptionsAuthenticationOptionsAnyOf = nil
		} else {
			return nil // data stored in dst.RestAPIOptionsAuthenticationOptionsAnyOf, return on the first match
		}
	} else {
		dst.RestAPIOptionsAuthenticationOptionsAnyOf = nil
	}

	// try to unmarshal JSON data into RestAPIOptionsAuthenticationOptionsAnyOf1
	err = json.Unmarshal(data, &dst.RestAPIOptionsAuthenticationOptionsAnyOf1);
	if err == nil {
		jsonRestAPIOptionsAuthenticationOptionsAnyOf1, _ := json.Marshal(dst.RestAPIOptionsAuthenticationOptionsAnyOf1)
		if string(jsonRestAPIOptionsAuthenticationOptionsAnyOf1) == "{}" { // empty struct
			dst.RestAPIOptionsAuthenticationOptionsAnyOf1 = nil
		} else {
			return nil // data stored in dst.RestAPIOptionsAuthenticationOptionsAnyOf1, return on the first match
		}
	} else {
		dst.RestAPIOptionsAuthenticationOptionsAnyOf1 = nil
	}

	// try to unmarshal JSON data into RestAPIOptionsAuthenticationOptionsAnyOf2
	err = json.Unmarshal(data, &dst.RestAPIOptionsAuthenticationOptionsAnyOf2);
	if err == nil {
		jsonRestAPIOptionsAuthenticationOptionsAnyOf2, _ := json.Marshal(dst.RestAPIOptionsAuthenticationOptionsAnyOf2)
		if string(jsonRestAPIOptionsAuthenticationOptionsAnyOf2) == "{}" { // empty struct
			dst.RestAPIOptionsAuthenticationOptionsAnyOf2 = nil
		} else {
			return nil // data stored in dst.RestAPIOptionsAuthenticationOptionsAnyOf2, return on the first match
		}
	} else {
		dst.RestAPIOptionsAuthenticationOptionsAnyOf2 = nil
	}

	// try to unmarshal JSON data into RestAPIOptionsAuthenticationOptionsAnyOf3
	err = json.Unmarshal(data, &dst.RestAPIOptionsAuthenticationOptionsAnyOf3);
	if err == nil {
		jsonRestAPIOptionsAuthenticationOptionsAnyOf3, _ := json.Marshal(dst.RestAPIOptionsAuthenticationOptionsAnyOf3)
		if string(jsonRestAPIOptionsAuthenticationOptionsAnyOf3) == "{}" { // empty struct
			dst.RestAPIOptionsAuthenticationOptionsAnyOf3 = nil
		} else {
			return nil // data stored in dst.RestAPIOptionsAuthenticationOptionsAnyOf3, return on the first match
		}
	} else {
		dst.RestAPIOptionsAuthenticationOptionsAnyOf3 = nil
	}

	// try to unmarshal JSON data into RestAPIOptionsAuthenticationOptionsAnyOf4
	err = json.Unmarshal(data, &dst.RestAPIOptionsAuthenticationOptionsAnyOf4);
	if err == nil {
		jsonRestAPIOptionsAuthenticationOptionsAnyOf4, _ := json.Marshal(dst.RestAPIOptionsAuthenticationOptionsAnyOf4)
		if string(jsonRestAPIOptionsAuthenticationOptionsAnyOf4) == "{}" { // empty struct
			dst.RestAPIOptionsAuthenticationOptionsAnyOf4 = nil
		} else {
			return nil // data stored in dst.RestAPIOptionsAuthenticationOptionsAnyOf4, return on the first match
		}
	} else {
		dst.RestAPIOptionsAuthenticationOptionsAnyOf4 = nil
	}

	// try to unmarshal JSON data into RestAPIOptionsAuthenticationOptionsAnyOf5
	err = json.Unmarshal(data, &dst.RestAPIOptionsAuthenticationOptionsAnyOf5);
	if err == nil {
		jsonRestAPIOptionsAuthenticationOptionsAnyOf5, _ := json.Marshal(dst.RestAPIOptionsAuthenticationOptionsAnyOf5)
		if string(jsonRestAPIOptionsAuthenticationOptionsAnyOf5) == "{}" { // empty struct
			dst.RestAPIOptionsAuthenticationOptionsAnyOf5 = nil
		} else {
			return nil // data stored in dst.RestAPIOptionsAuthenticationOptionsAnyOf5, return on the first match
		}
	} else {
		dst.RestAPIOptionsAuthenticationOptionsAnyOf5 = nil
	}

	// try to unmarshal JSON data into RestAPIOptionsAuthenticationOptionsAnyOf6
	err = json.Unmarshal(data, &dst.RestAPIOptionsAuthenticationOptionsAnyOf6);
	if err == nil {
		jsonRestAPIOptionsAuthenticationOptionsAnyOf6, _ := json.Marshal(dst.RestAPIOptionsAuthenticationOptionsAnyOf6)
		if string(jsonRestAPIOptionsAuthenticationOptionsAnyOf6) == "{}" { // empty struct
			dst.RestAPIOptionsAuthenticationOptionsAnyOf6 = nil
		} else {
			return nil // data stored in dst.RestAPIOptionsAuthenticationOptionsAnyOf6, return on the first match
		}
	} else {
		dst.RestAPIOptionsAuthenticationOptionsAnyOf6 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(RestAPIOptionsAuthenticationOptions)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *RestAPIOptionsAuthenticationOptions) MarshalJSON() ([]byte, error) {
	if src.RestAPIOptionsAuthenticationOptionsAnyOf != nil {
		return json.Marshal(&src.RestAPIOptionsAuthenticationOptionsAnyOf)
	}

	if src.RestAPIOptionsAuthenticationOptionsAnyOf1 != nil {
		return json.Marshal(&src.RestAPIOptionsAuthenticationOptionsAnyOf1)
	}

	if src.RestAPIOptionsAuthenticationOptionsAnyOf2 != nil {
		return json.Marshal(&src.RestAPIOptionsAuthenticationOptionsAnyOf2)
	}

	if src.RestAPIOptionsAuthenticationOptionsAnyOf3 != nil {
		return json.Marshal(&src.RestAPIOptionsAuthenticationOptionsAnyOf3)
	}

	if src.RestAPIOptionsAuthenticationOptionsAnyOf4 != nil {
		return json.Marshal(&src.RestAPIOptionsAuthenticationOptionsAnyOf4)
	}

	if src.RestAPIOptionsAuthenticationOptionsAnyOf5 != nil {
		return json.Marshal(&src.RestAPIOptionsAuthenticationOptionsAnyOf5)
	}

	if src.RestAPIOptionsAuthenticationOptionsAnyOf6 != nil {
		return json.Marshal(&src.RestAPIOptionsAuthenticationOptionsAnyOf6)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableRestAPIOptionsAuthenticationOptions struct {
	value *RestAPIOptionsAuthenticationOptions
	isSet bool
}

func (v NullableRestAPIOptionsAuthenticationOptions) Get() *RestAPIOptionsAuthenticationOptions {
	return v.value
}

func (v *NullableRestAPIOptionsAuthenticationOptions) Set(val *RestAPIOptionsAuthenticationOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRestAPIOptionsAuthenticationOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRestAPIOptionsAuthenticationOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestAPIOptionsAuthenticationOptions(val *RestAPIOptionsAuthenticationOptions) *NullableRestAPIOptionsAuthenticationOptions {
	return &NullableRestAPIOptionsAuthenticationOptions{value: val, isSet: true}
}

func (v NullableRestAPIOptionsAuthenticationOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestAPIOptionsAuthenticationOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


