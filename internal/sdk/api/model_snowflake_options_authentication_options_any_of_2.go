/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnowflakeOptionsAuthenticationOptionsAnyOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeOptionsAuthenticationOptionsAnyOf2{}

// SnowflakeOptionsAuthenticationOptionsAnyOf2 struct for SnowflakeOptionsAuthenticationOptionsAnyOf2
type SnowflakeOptionsAuthenticationOptionsAnyOf2 struct {
	AuthenticationType string `json:"authentication_type"`
	Oauth2ClientId string `json:"oauth2_client_id"`
	Oauth2ClientSecret string `json:"oauth2_client_secret"`
	Oauth2CallbackUrl *string `json:"oauth2_callback_url,omitempty"`
}

type _SnowflakeOptionsAuthenticationOptionsAnyOf2 SnowflakeOptionsAuthenticationOptionsAnyOf2

// NewSnowflakeOptionsAuthenticationOptionsAnyOf2 instantiates a new SnowflakeOptionsAuthenticationOptionsAnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeOptionsAuthenticationOptionsAnyOf2(authenticationType string, oauth2ClientId string, oauth2ClientSecret string) *SnowflakeOptionsAuthenticationOptionsAnyOf2 {
	this := SnowflakeOptionsAuthenticationOptionsAnyOf2{}
	this.AuthenticationType = authenticationType
	this.Oauth2ClientId = oauth2ClientId
	this.Oauth2ClientSecret = oauth2ClientSecret
	return &this
}

// NewSnowflakeOptionsAuthenticationOptionsAnyOf2WithDefaults instantiates a new SnowflakeOptionsAuthenticationOptionsAnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeOptionsAuthenticationOptionsAnyOf2WithDefaults() *SnowflakeOptionsAuthenticationOptionsAnyOf2 {
	this := SnowflakeOptionsAuthenticationOptionsAnyOf2{}
	return &this
}

// GetAuthenticationType returns the AuthenticationType field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) GetAuthenticationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationType, true
}

// SetAuthenticationType sets field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) SetAuthenticationType(v string) {
	o.AuthenticationType = v
}

// GetOauth2ClientId returns the Oauth2ClientId field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) GetOauth2ClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Oauth2ClientId
}

// GetOauth2ClientIdOk returns a tuple with the Oauth2ClientId field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) GetOauth2ClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oauth2ClientId, true
}

// SetOauth2ClientId sets field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) SetOauth2ClientId(v string) {
	o.Oauth2ClientId = v
}

// GetOauth2ClientSecret returns the Oauth2ClientSecret field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) GetOauth2ClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Oauth2ClientSecret
}

// GetOauth2ClientSecretOk returns a tuple with the Oauth2ClientSecret field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) GetOauth2ClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oauth2ClientSecret, true
}

// SetOauth2ClientSecret sets field value
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) SetOauth2ClientSecret(v string) {
	o.Oauth2ClientSecret = v
}

// GetOauth2CallbackUrl returns the Oauth2CallbackUrl field value if set, zero value otherwise.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) GetOauth2CallbackUrl() string {
	if o == nil || IsNil(o.Oauth2CallbackUrl) {
		var ret string
		return ret
	}
	return *o.Oauth2CallbackUrl
}

// GetOauth2CallbackUrlOk returns a tuple with the Oauth2CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) GetOauth2CallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Oauth2CallbackUrl) {
		return nil, false
	}
	return o.Oauth2CallbackUrl, true
}

// HasOauth2CallbackUrl returns a boolean if a field has been set.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) HasOauth2CallbackUrl() bool {
	if o != nil && !IsNil(o.Oauth2CallbackUrl) {
		return true
	}

	return false
}

// SetOauth2CallbackUrl gets a reference to the given string and assigns it to the Oauth2CallbackUrl field.
func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) SetOauth2CallbackUrl(v string) {
	o.Oauth2CallbackUrl = &v
}

func (o SnowflakeOptionsAuthenticationOptionsAnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeOptionsAuthenticationOptionsAnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authentication_type"] = o.AuthenticationType
	toSerialize["oauth2_client_id"] = o.Oauth2ClientId
	toSerialize["oauth2_client_secret"] = o.Oauth2ClientSecret
	if !IsNil(o.Oauth2CallbackUrl) {
		toSerialize["oauth2_callback_url"] = o.Oauth2CallbackUrl
	}
	return toSerialize, nil
}

func (o *SnowflakeOptionsAuthenticationOptionsAnyOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authentication_type",
		"oauth2_client_id",
		"oauth2_client_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnowflakeOptionsAuthenticationOptionsAnyOf2 := _SnowflakeOptionsAuthenticationOptionsAnyOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnowflakeOptionsAuthenticationOptionsAnyOf2)

	if err != nil {
		return err
	}

	*o = SnowflakeOptionsAuthenticationOptionsAnyOf2(varSnowflakeOptionsAuthenticationOptionsAnyOf2)

	return err
}

type NullableSnowflakeOptionsAuthenticationOptionsAnyOf2 struct {
	value *SnowflakeOptionsAuthenticationOptionsAnyOf2
	isSet bool
}

func (v NullableSnowflakeOptionsAuthenticationOptionsAnyOf2) Get() *SnowflakeOptionsAuthenticationOptionsAnyOf2 {
	return v.value
}

func (v *NullableSnowflakeOptionsAuthenticationOptionsAnyOf2) Set(val *SnowflakeOptionsAuthenticationOptionsAnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeOptionsAuthenticationOptionsAnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeOptionsAuthenticationOptionsAnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeOptionsAuthenticationOptionsAnyOf2(val *SnowflakeOptionsAuthenticationOptionsAnyOf2) *NullableSnowflakeOptionsAuthenticationOptionsAnyOf2 {
	return &NullableSnowflakeOptionsAuthenticationOptionsAnyOf2{value: val, isSet: true}
}

func (v NullableSnowflakeOptionsAuthenticationOptionsAnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeOptionsAuthenticationOptionsAnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


