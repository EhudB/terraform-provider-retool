/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SourceControlConfigGet200ResponseDataAnyOfConfig struct for SourceControlConfigGet200ResponseDataAnyOfConfig
type SourceControlConfigGet200ResponseDataAnyOfConfig struct {
	SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf *SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf
	SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 *SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SourceControlConfigGet200ResponseDataAnyOfConfig) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf
	err = json.Unmarshal(data, &dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf);
	if err == nil {
		jsonSourceControlConfigGet200ResponseDataAnyOfConfigAnyOf, _ := json.Marshal(dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf)
		if string(jsonSourceControlConfigGet200ResponseDataAnyOfConfigAnyOf) == "{}" { // empty struct
			dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf = nil
		} else {
			return nil // data stored in dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf, return on the first match
		}
	} else {
		dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf = nil
	}

	// try to unmarshal JSON data into SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1
	err = json.Unmarshal(data, &dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1);
	if err == nil {
		jsonSourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1, _ := json.Marshal(dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1)
		if string(jsonSourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1) == "{}" { // empty struct
			dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 = nil
		} else {
			return nil // data stored in dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1, return on the first match
		}
	} else {
		dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SourceControlConfigGet200ResponseDataAnyOfConfig)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SourceControlConfigGet200ResponseDataAnyOfConfig) MarshalJSON() ([]byte, error) {
	if src.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf != nil {
		return json.Marshal(&src.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf)
	}

	if src.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 != nil {
		return json.Marshal(&src.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSourceControlConfigGet200ResponseDataAnyOfConfig struct {
	value *SourceControlConfigGet200ResponseDataAnyOfConfig
	isSet bool
}

func (v NullableSourceControlConfigGet200ResponseDataAnyOfConfig) Get() *SourceControlConfigGet200ResponseDataAnyOfConfig {
	return v.value
}

func (v *NullableSourceControlConfigGet200ResponseDataAnyOfConfig) Set(val *SourceControlConfigGet200ResponseDataAnyOfConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlConfigGet200ResponseDataAnyOfConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlConfigGet200ResponseDataAnyOfConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlConfigGet200ResponseDataAnyOfConfig(val *SourceControlConfigGet200ResponseDataAnyOfConfig) *NullableSourceControlConfigGet200ResponseDataAnyOfConfig {
	return &NullableSourceControlConfigGet200ResponseDataAnyOfConfig{value: val, isSet: true}
}

func (v NullableSourceControlConfigGet200ResponseDataAnyOfConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlConfigGet200ResponseDataAnyOfConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


