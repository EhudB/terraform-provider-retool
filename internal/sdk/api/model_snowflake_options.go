/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnowflakeOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeOptions{}

// SnowflakeOptions struct for SnowflakeOptions
type SnowflakeOptions struct {
	AccountIdentifier string `json:"account_identifier"`
	DatabaseOptions SnowflakeOptionsDatabaseOptions `json:"database_options"`
	UserRole *string `json:"user_role,omitempty"`
	AuthenticationOptions SnowflakeOptionsAuthenticationOptions `json:"authentication_options"`
}

type _SnowflakeOptions SnowflakeOptions

// NewSnowflakeOptions instantiates a new SnowflakeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeOptions(accountIdentifier string, databaseOptions SnowflakeOptionsDatabaseOptions, authenticationOptions SnowflakeOptionsAuthenticationOptions) *SnowflakeOptions {
	this := SnowflakeOptions{}
	this.AccountIdentifier = accountIdentifier
	this.DatabaseOptions = databaseOptions
	this.AuthenticationOptions = authenticationOptions
	return &this
}

// NewSnowflakeOptionsWithDefaults instantiates a new SnowflakeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeOptionsWithDefaults() *SnowflakeOptions {
	this := SnowflakeOptions{}
	return &this
}

// GetAccountIdentifier returns the AccountIdentifier field value
func (o *SnowflakeOptions) GetAccountIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountIdentifier
}

// GetAccountIdentifierOk returns a tuple with the AccountIdentifier field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptions) GetAccountIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountIdentifier, true
}

// SetAccountIdentifier sets field value
func (o *SnowflakeOptions) SetAccountIdentifier(v string) {
	o.AccountIdentifier = v
}

// GetDatabaseOptions returns the DatabaseOptions field value
func (o *SnowflakeOptions) GetDatabaseOptions() SnowflakeOptionsDatabaseOptions {
	if o == nil {
		var ret SnowflakeOptionsDatabaseOptions
		return ret
	}

	return o.DatabaseOptions
}

// GetDatabaseOptionsOk returns a tuple with the DatabaseOptions field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptions) GetDatabaseOptionsOk() (*SnowflakeOptionsDatabaseOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseOptions, true
}

// SetDatabaseOptions sets field value
func (o *SnowflakeOptions) SetDatabaseOptions(v SnowflakeOptionsDatabaseOptions) {
	o.DatabaseOptions = v
}

// GetUserRole returns the UserRole field value if set, zero value otherwise.
func (o *SnowflakeOptions) GetUserRole() string {
	if o == nil || IsNil(o.UserRole) {
		var ret string
		return ret
	}
	return *o.UserRole
}

// GetUserRoleOk returns a tuple with the UserRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOptions) GetUserRoleOk() (*string, bool) {
	if o == nil || IsNil(o.UserRole) {
		return nil, false
	}
	return o.UserRole, true
}

// HasUserRole returns a boolean if a field has been set.
func (o *SnowflakeOptions) HasUserRole() bool {
	if o != nil && !IsNil(o.UserRole) {
		return true
	}

	return false
}

// SetUserRole gets a reference to the given string and assigns it to the UserRole field.
func (o *SnowflakeOptions) SetUserRole(v string) {
	o.UserRole = &v
}

// GetAuthenticationOptions returns the AuthenticationOptions field value
func (o *SnowflakeOptions) GetAuthenticationOptions() SnowflakeOptionsAuthenticationOptions {
	if o == nil {
		var ret SnowflakeOptionsAuthenticationOptions
		return ret
	}

	return o.AuthenticationOptions
}

// GetAuthenticationOptionsOk returns a tuple with the AuthenticationOptions field value
// and a boolean to check if the value has been set.
func (o *SnowflakeOptions) GetAuthenticationOptionsOk() (*SnowflakeOptionsAuthenticationOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationOptions, true
}

// SetAuthenticationOptions sets field value
func (o *SnowflakeOptions) SetAuthenticationOptions(v SnowflakeOptionsAuthenticationOptions) {
	o.AuthenticationOptions = v
}

func (o SnowflakeOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_identifier"] = o.AccountIdentifier
	toSerialize["database_options"] = o.DatabaseOptions
	if !IsNil(o.UserRole) {
		toSerialize["user_role"] = o.UserRole
	}
	toSerialize["authentication_options"] = o.AuthenticationOptions
	return toSerialize, nil
}

func (o *SnowflakeOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_identifier",
		"database_options",
		"authentication_options",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnowflakeOptions := _SnowflakeOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnowflakeOptions)

	if err != nil {
		return err
	}

	*o = SnowflakeOptions(varSnowflakeOptions)

	return err
}

type NullableSnowflakeOptions struct {
	value *SnowflakeOptions
	isSet bool
}

func (v NullableSnowflakeOptions) Get() *SnowflakeOptions {
	return v.value
}

func (v *NullableSnowflakeOptions) Set(val *SnowflakeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeOptions(val *SnowflakeOptions) *NullableSnowflakeOptions {
	return &NullableSnowflakeOptions{value: val, isSet: true}
}

func (v NullableSnowflakeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


