/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceControlConfigPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceControlConfigPutRequest{}

// SourceControlConfigPutRequest Shape of Source Control provider config request
type SourceControlConfigPutRequest struct {
	Config SourceControlConfigPutRequestConfig `json:"config"`
}

type _SourceControlConfigPutRequest SourceControlConfigPutRequest

// NewSourceControlConfigPutRequest instantiates a new SourceControlConfigPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceControlConfigPutRequest(config SourceControlConfigPutRequestConfig) *SourceControlConfigPutRequest {
	this := SourceControlConfigPutRequest{}
	this.Config = config
	return &this
}

// NewSourceControlConfigPutRequestWithDefaults instantiates a new SourceControlConfigPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceControlConfigPutRequestWithDefaults() *SourceControlConfigPutRequest {
	this := SourceControlConfigPutRequest{}
	return &this
}

// GetConfig returns the Config field value
func (o *SourceControlConfigPutRequest) GetConfig() SourceControlConfigPutRequestConfig {
	if o == nil {
		var ret SourceControlConfigPutRequestConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigPutRequest) GetConfigOk() (*SourceControlConfigPutRequestConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *SourceControlConfigPutRequest) SetConfig(v SourceControlConfigPutRequestConfig) {
	o.Config = v
}

func (o SourceControlConfigPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceControlConfigPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	return toSerialize, nil
}

func (o *SourceControlConfigPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceControlConfigPutRequest := _SourceControlConfigPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceControlConfigPutRequest)

	if err != nil {
		return err
	}

	*o = SourceControlConfigPutRequest(varSourceControlConfigPutRequest)

	return err
}

type NullableSourceControlConfigPutRequest struct {
	value *SourceControlConfigPutRequest
	isSet bool
}

func (v NullableSourceControlConfigPutRequest) Get() *SourceControlConfigPutRequest {
	return v.value
}

func (v *NullableSourceControlConfigPutRequest) Set(val *SourceControlConfigPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlConfigPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlConfigPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlConfigPutRequest(val *SourceControlConfigPutRequest) *NullableSourceControlConfigPutRequest {
	return &NullableSourceControlConfigPutRequest{value: val, isSet: true}
}

func (v NullableSourceControlConfigPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlConfigPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


