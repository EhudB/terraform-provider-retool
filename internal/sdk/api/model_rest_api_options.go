/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestAPIOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestAPIOptions{}

// RestAPIOptions struct for RestAPIOptions
type RestAPIOptions struct {
	// Use the absolute URL (e.g https://example.com).
	BaseUrl string `json:"base_url"`
	UrlParameters [][]string `json:"url_parameters,omitempty"`
	Headers [][]string `json:"headers,omitempty"`
	// Extra body values are not passed for GET or HEAD requests.
	ExtraBodyValues [][]string `json:"extra_body_values,omitempty"`
	// You can use the pattern COOKIE_your_cookie_name in the Headers section in order to implement the double-cookie submit pattern.
	CookiesToForward []string `json:"cookies_to_forward,omitempty"`
	// This is useful if you have dynamic cookie names.
	ForwardAllCookies *bool `json:"forward_all_cookies,omitempty"`
	AuthenticationOptions *RestAPIOptionsAuthenticationOptions `json:"authentication_options,omitempty"`
}

type _RestAPIOptions RestAPIOptions

// NewRestAPIOptions instantiates a new RestAPIOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestAPIOptions(baseUrl string) *RestAPIOptions {
	this := RestAPIOptions{}
	this.BaseUrl = baseUrl
	return &this
}

// NewRestAPIOptionsWithDefaults instantiates a new RestAPIOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestAPIOptionsWithDefaults() *RestAPIOptions {
	this := RestAPIOptions{}
	return &this
}

// GetBaseUrl returns the BaseUrl field value
func (o *RestAPIOptions) GetBaseUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value
// and a boolean to check if the value has been set.
func (o *RestAPIOptions) GetBaseUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseUrl, true
}

// SetBaseUrl sets field value
func (o *RestAPIOptions) SetBaseUrl(v string) {
	o.BaseUrl = v
}

// GetUrlParameters returns the UrlParameters field value if set, zero value otherwise.
func (o *RestAPIOptions) GetUrlParameters() [][]string {
	if o == nil || IsNil(o.UrlParameters) {
		var ret [][]string
		return ret
	}
	return o.UrlParameters
}

// GetUrlParametersOk returns a tuple with the UrlParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAPIOptions) GetUrlParametersOk() ([][]string, bool) {
	if o == nil || IsNil(o.UrlParameters) {
		return nil, false
	}
	return o.UrlParameters, true
}

// HasUrlParameters returns a boolean if a field has been set.
func (o *RestAPIOptions) HasUrlParameters() bool {
	if o != nil && !IsNil(o.UrlParameters) {
		return true
	}

	return false
}

// SetUrlParameters gets a reference to the given [][]string and assigns it to the UrlParameters field.
func (o *RestAPIOptions) SetUrlParameters(v [][]string) {
	o.UrlParameters = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *RestAPIOptions) GetHeaders() [][]string {
	if o == nil || IsNil(o.Headers) {
		var ret [][]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAPIOptions) GetHeadersOk() ([][]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *RestAPIOptions) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given [][]string and assigns it to the Headers field.
func (o *RestAPIOptions) SetHeaders(v [][]string) {
	o.Headers = v
}

// GetExtraBodyValues returns the ExtraBodyValues field value if set, zero value otherwise.
func (o *RestAPIOptions) GetExtraBodyValues() [][]string {
	if o == nil || IsNil(o.ExtraBodyValues) {
		var ret [][]string
		return ret
	}
	return o.ExtraBodyValues
}

// GetExtraBodyValuesOk returns a tuple with the ExtraBodyValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAPIOptions) GetExtraBodyValuesOk() ([][]string, bool) {
	if o == nil || IsNil(o.ExtraBodyValues) {
		return nil, false
	}
	return o.ExtraBodyValues, true
}

// HasExtraBodyValues returns a boolean if a field has been set.
func (o *RestAPIOptions) HasExtraBodyValues() bool {
	if o != nil && !IsNil(o.ExtraBodyValues) {
		return true
	}

	return false
}

// SetExtraBodyValues gets a reference to the given [][]string and assigns it to the ExtraBodyValues field.
func (o *RestAPIOptions) SetExtraBodyValues(v [][]string) {
	o.ExtraBodyValues = v
}

// GetCookiesToForward returns the CookiesToForward field value if set, zero value otherwise.
func (o *RestAPIOptions) GetCookiesToForward() []string {
	if o == nil || IsNil(o.CookiesToForward) {
		var ret []string
		return ret
	}
	return o.CookiesToForward
}

// GetCookiesToForwardOk returns a tuple with the CookiesToForward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAPIOptions) GetCookiesToForwardOk() ([]string, bool) {
	if o == nil || IsNil(o.CookiesToForward) {
		return nil, false
	}
	return o.CookiesToForward, true
}

// HasCookiesToForward returns a boolean if a field has been set.
func (o *RestAPIOptions) HasCookiesToForward() bool {
	if o != nil && !IsNil(o.CookiesToForward) {
		return true
	}

	return false
}

// SetCookiesToForward gets a reference to the given []string and assigns it to the CookiesToForward field.
func (o *RestAPIOptions) SetCookiesToForward(v []string) {
	o.CookiesToForward = v
}

// GetForwardAllCookies returns the ForwardAllCookies field value if set, zero value otherwise.
func (o *RestAPIOptions) GetForwardAllCookies() bool {
	if o == nil || IsNil(o.ForwardAllCookies) {
		var ret bool
		return ret
	}
	return *o.ForwardAllCookies
}

// GetForwardAllCookiesOk returns a tuple with the ForwardAllCookies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAPIOptions) GetForwardAllCookiesOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardAllCookies) {
		return nil, false
	}
	return o.ForwardAllCookies, true
}

// HasForwardAllCookies returns a boolean if a field has been set.
func (o *RestAPIOptions) HasForwardAllCookies() bool {
	if o != nil && !IsNil(o.ForwardAllCookies) {
		return true
	}

	return false
}

// SetForwardAllCookies gets a reference to the given bool and assigns it to the ForwardAllCookies field.
func (o *RestAPIOptions) SetForwardAllCookies(v bool) {
	o.ForwardAllCookies = &v
}

// GetAuthenticationOptions returns the AuthenticationOptions field value if set, zero value otherwise.
func (o *RestAPIOptions) GetAuthenticationOptions() RestAPIOptionsAuthenticationOptions {
	if o == nil || IsNil(o.AuthenticationOptions) {
		var ret RestAPIOptionsAuthenticationOptions
		return ret
	}
	return *o.AuthenticationOptions
}

// GetAuthenticationOptionsOk returns a tuple with the AuthenticationOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAPIOptions) GetAuthenticationOptionsOk() (*RestAPIOptionsAuthenticationOptions, bool) {
	if o == nil || IsNil(o.AuthenticationOptions) {
		return nil, false
	}
	return o.AuthenticationOptions, true
}

// HasAuthenticationOptions returns a boolean if a field has been set.
func (o *RestAPIOptions) HasAuthenticationOptions() bool {
	if o != nil && !IsNil(o.AuthenticationOptions) {
		return true
	}

	return false
}

// SetAuthenticationOptions gets a reference to the given RestAPIOptionsAuthenticationOptions and assigns it to the AuthenticationOptions field.
func (o *RestAPIOptions) SetAuthenticationOptions(v RestAPIOptionsAuthenticationOptions) {
	o.AuthenticationOptions = &v
}

func (o RestAPIOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestAPIOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["base_url"] = o.BaseUrl
	if !IsNil(o.UrlParameters) {
		toSerialize["url_parameters"] = o.UrlParameters
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.ExtraBodyValues) {
		toSerialize["extra_body_values"] = o.ExtraBodyValues
	}
	if !IsNil(o.CookiesToForward) {
		toSerialize["cookies_to_forward"] = o.CookiesToForward
	}
	if !IsNil(o.ForwardAllCookies) {
		toSerialize["forward_all_cookies"] = o.ForwardAllCookies
	}
	if !IsNil(o.AuthenticationOptions) {
		toSerialize["authentication_options"] = o.AuthenticationOptions
	}
	return toSerialize, nil
}

func (o *RestAPIOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"base_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestAPIOptions := _RestAPIOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestAPIOptions)

	if err != nil {
		return err
	}

	*o = RestAPIOptions(varRestAPIOptions)

	return err
}

type NullableRestAPIOptions struct {
	value *RestAPIOptions
	isSet bool
}

func (v NullableRestAPIOptions) Get() *RestAPIOptions {
	return v.value
}

func (v *NullableRestAPIOptions) Set(val *RestAPIOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRestAPIOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRestAPIOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestAPIOptions(val *RestAPIOptions) *NullableRestAPIOptions {
	return &NullableRestAPIOptions{value: val, isSet: true}
}

func (v NullableRestAPIOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestAPIOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


